
inherit ViClone
{
    var statusLineInCommandMode:String;

    def initialize():dynamic {
        inherit();

        statusLineInCommandMode = "";

        keyEvents[':'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterCommandMode();
        }
    }

    def enterCommandMode():dynamic {
        mode = COMMANDMODE;
        statusLineInCommandMode = "";
    }

    def commandMode(key:int) {
        when(key) {
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                mode = EDITMODE;
                statusLineInCommandMode = "";
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInCommandMode.delete(-2);
            }
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                if(statusLineInCommandMode.match(/^wq$/) || statusLineInCommandMode.match(/^qw$/)) {
                    if(windows.length() == 1) {
                        win.writeToFile();
                        win.saveCursorPos();
                        win.modifiedText = false;
    
                        endOfAplication = true;
                    }
                    else {
                        win.writeToFile();
                        win.saveCursorPos();
                        win.modifiedText = false;
    
                        windows.deleteByID(win);

                        win = windows.items(-1);

                        resizeWindows();
                    }
                }
                elif(statusLineInCommandMode.match(/^q!$/)) {
                    endOfAplication = true;

                    windows.each {
                        it.saveCursorPos();
                    }
    
                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                }
                elif(statusLineInCommandMode.match(/^w$/)) {
                    win.writeToFile();
                    win.saveCursorPos();
                    win.modifiedText = false;
    
                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                }
                elif(statusLineInCommandMode.match(/^q$/)) {
                    if(windows.length() == 1) {
                        if(!win.modifiedText) {
                            win.saveCursorPos();
                            endOfAplication = true;
                        }
                    }
                    else {
                        if(!win.modifiedText) {
                            win.saveCursorPos();
                            windows.deleteByID(win);

                            win = windows.items(-1);

                            resizeWindows();
                        }
                    }
    
                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                }
                elif(statusLineInCommandMode.match(/^sp$/)) {
                    dirPaneOn(); 
                }
                elif(statusLineInCommandMode.match(/^sp\s+.+/)) {
                    fpath := statusLineInCommandMode.scan(/^sp\s+(.+)/).items(1);
                    
                    dir_name := dirname(fpath);
                    file_name := basename(fpath);

                    try {
                        win = createNewWin(dir_name, file_name, -1);
                    }
                    mode = EDITMODE;
                    statusLineInCommandMode = "";
                }
            }
            else {
                statusLineInCommandMode.append(key.to_char);
            }
        }
    }

    def statusView(): dynamic {
        if(mode == COMMANDMODE) {
            maxy := getmaxy();

            clearStatusLine();

            attron(A_REVERSE);
            mvprintw(maxy-1, 0, ":\{statusLineInCommandMode}");
            attroff(A_REVERSE);
        }
        else {
            inherit();
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == COMMANDMODE) {
            commandMode(key);
        }
        else {
            inherit(key, key2);
        }
    }
}