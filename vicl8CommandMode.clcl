
inherit ViClone
{
    var statusLineInCommandMode:String;

    def initialize():dynamic {
        inherit();

        statusLineInCommandMode = "";

        keyEvents[':'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterCommandMode();
        }
    }

    def enterCommandMode():dynamic {
        mode = COMMANDMODE;
        statusLineInCommandMode = "";
    }

    def commandMode(key:int) {
        when(key) {
            case ('w'.to_int) {
                statusLineInCommandMode.append("w");
            }
            case ('q'.to_int) {
                statusLineInCommandMode.append("q");
            }
            case ('!'.to_int) {
                statusLineInCommandMode.append("!");
            }
            case (('['-'A').to_int+1, ('C'-'A').to_int+1) {
                mode = EDITMODE;
                statusLineInCommandMode = "";
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInCommandMode.delete(-2);
            }
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                if(statusLineInCommandMode.match(/w/) && statusLineInCommandMode.match(/q/)) {
                    windows.each {
                        it.writeToFile();
                        it.saveCursorPos();
                    }
                    endOfAplication = true;
                }
                elif(statusLineInCommandMode.match(/q/) && statusLineInCommandMode.match(/!/)) {
                    endOfAplication = true;

                    windows.each {
                        it.saveCursorPos();
                    }
                }
                elif(statusLineInCommandMode.match(/w/)) {
                    win.writeToFile();
                    win.saveCursorPos();
                    win.modifiedText = false;
                }
                elif(statusLineInCommandMode.match(/q/)) {
                    flag := false;
                    windows.each {
                        if(it.modifiedText) {
                            flag = true;
                        }
                    }
                    if(!flag) {
                        endOfAplication = true;
                    }

                    windows.each {
                        it.saveCursorPos();
                    }
                }

                mode = EDITMODE;
                statusLineInCommandMode = "";
            }
        }
    }

    def statusView(): dynamic {
        if(mode == COMMANDMODE) {
            maxy := getmaxy();

            clearStatusLine();

            attron(A_REVERSE);
            mvprintw(maxy-1, 0, ":\{statusLineInCommandMode}");
            attroff(A_REVERSE);
        }
        else {
            inherit();
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == COMMANDMODE) {
            commandMode(key);
        }
        else {
            inherit(key, key2);
        }
    }
}
