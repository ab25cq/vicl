include "viclone.clcl"

class ViClone
{
    dirName:String;

    fileNames: SortableList<String>;
    dirScrollTop: int;
    dirCursor:int; 
    
    dirPaneLength: int; 
    
    visibleDirPane: bool
      
    def initialize() {
        inherit();
        
        dirScrollTop = 0; 
        dirCursor = 0; 
        
        visibleDirPane = true; 
        maxx := getmaxx();
        dirPaneLength = maxx/6;
        
        changeDirectory(getcwd());
    }
    
    def changeDirectory(path:String) {
        dirName = path.clone();
        fileNames = dirName.toPath().entries().map { it.toPath().basename().toString() }
            .sort {
                if(it.chars(0) == '.') {
                    if(it2.chars(0) == '.') { 
                        return it.compare(it2);
                    } 
                    else {
                        return -1; 
                    } 
                }
                else {
                    var ext1 = it.toPath().extname(); 
                    var ext2 = it2.toPath().extname(); 
                    
                    var comp = ext1.compare(ext2); 
                     
                    if(comp == 0) {
                        return it.compare(it2); 
                    }
                    else {
                        return comp 
                    } 
                } 
            } 
    } 
    
    def setDirCursor(fname:String) {
        dirCursor = fileNames.indexOf(fname).filter { if(it == -1) { 0 } else { it } };
        
        dirScrollTop = dirCursor - (MaxY-2) / 2; 
        
        dirCursor -= dirScrollTop;
        
        if(dirScrollTop < 0) {
            dirCursor += dirScrollTop; 
            dirScrollTop = 0; 
        } 
    } 
    
    def dirPaneOn() {
        mode = DIRMODE;
        visibleDirPane = true;
        maxx := getmaxx();
        dirPaneLength = maxx/6;
        makeMaxxy(); 
    } 
    
    def dirPaneOff() {
/*
        visibleDirPane = false;
        dirPaneLength = 0; 
        makeMaxxy(); 
*/
        mode = EDITMODE; 
    } 

    def defaultKeyEvents() {
        inherit();

        keyEvents[('W'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-W
            dirPaneOn(); 
        }
    }
    
    def dirView() {
        if(visibleDirPane) { 
            for(i:=0; i<MaxY-1; i++) {
                if(dirCursor == i) {
                    if(i+dirScrollTop < fileNames.length()) {
                        attron(A_REVERSE); 
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                        attroff(A_REVERSE); 
                    }
                    mvprintw(i, dirPaneLength-1, "|");
                }
                else {
                    if(i+dirScrollTop < fileNames.length()) {
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s|", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                    }
                    else { 
                        mvprintw(i, 0, " ".multiply(dirPaneLength-1).append("|"));
                    } 
                } 
            } 
        } 
    } 

    def dirMode(key:int) {
        when(key) {
            case ('j'.to_int, KEY_DOWN) {
                dirCursor++;
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor--; 
                } 
                
                if(dirCursor >= MaxY-1) {
                    dirScrollTop++; 
                    dirCursor--; 
                } 
            }
            case ('k'.to_int, KEY_UP) {
                dirCursor--;
                
                if(dirCursor < 0) {
                    dirScrollTop--; 
                    dirCursor++; 
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case (('D'-'A').to_int+1) {
                dirCursor += MaxY / 2; 
                
                if(dirCursor >= MaxY-2) {
                    dirScrollTop += dirCursor - MaxY + 2;
                    dirCursor = MaxY -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = MaxY -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('U'-'A').to_int+1) {
                dirCursor -= MaxY / 2; 
                
                if(dirCursor < 0) {
                    dirScrollTop += dirCursor;
                    dirCursor = 0;
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case ('g'.to_int) {
                var key = getch();
                
                if(key == 'g'.to_int) {
                    dirScrollTop = 0;
                    dirCursor = 0; 
                } 
            }
            case ('G'.to_int) {
                dirCursor+=9999;
                
                if(dirCursor >= MaxY-2) {
                    dirScrollTop += dirCursor - MaxY + 2;
                    dirCursor = MaxY -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = MaxY -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('W'-'A').to_int+1,('['-'A').to_int+1) {
                dirPaneOff(); 
            }
            case ('\n'.to_int) {
                writeToFile().if {
                    saveCursorPos();
                    readFile(fileNames.items(dirScrollTop+dirCursor));
                    dirPaneOff(); 
                }
            }
            case ('/'.to_int) {
                endwin();
                iclover2 -s 'grep  * | less' -p 5 -c
                initscr();
                keypad(stdscr, true);
                noecho();
            }
            case (':'.to_int) {
                endwin();
                iclover2
                initscr();
                keypad(stdscr, true);
                noecho();
            }
            case (('L'-'A').to_int+1) {
                makeVisibleTexts()
                clear();
                view();
            }
        }
    }

    def runKeyEvents(key:int) {
        if(mode == DIRMODE) {
            dirMode(key);
        }
    }
}