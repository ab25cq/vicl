include "vicl1Lib.clcl"

class ViClone
{
    dirName:String;
    dirScrollTop: int;
    dirCursor:int; 
    dirPaneLength: int; 
    visibleDirPane: bool
    fileNames: SortableList<String>?;
    
    fileName:String?;
    texts:SortableList<String>;
      
    def initialize() {
        inherit();
        
        dirScrollTop = 0; 
        dirCursor = 0; 
        
 /*
        visibleDirPane = true; 
        maxx := getmaxx();
        dirPaneLength = maxx/6;
 */       
        visibleDirPane = false;
        dirPaneLength = 0; 
        makeMaxxy(); 
        
        dirName = getcwd();
        #changeDirectory(getcwd());
        fileNames = null;
    
        readFile(fileName);
    }

    def writeToFile():bool {
        if(fileName == null) {
#            fileName = inputStringLine("input file name:");
        }
        else {
            fname := dirName.clone().append("/").append(fileName);

            if(access(fname, W_OK) == 0) {
                texts.join("\n").write(fname);
            }
        }

        return true;
    }
    
    def changeDirectory(path:String) {
        dirName = path.clone();
        rereadDir();
    } 
    
    def setDirCursor(fname:String) {
        dirCursor = fileNames.indexOf(fname).filter { if(it == -1) { 0 } else { it } };
        
        dirScrollTop = dirCursor - (MaxY-2) / 2; 
        
        dirCursor -= dirScrollTop;
        
        if(dirScrollTop < 0) {
            dirCursor += dirScrollTop; 
            dirScrollTop = 0; 
        } 
    } 
    
    def rereadDir() {
        fileNames = dirName.toPath().entries().map { it.toPath().basename().toString() }
            .sort {
                if(it.chars(0) == '.') {
                    if(it2.chars(0) == '.') { 
                        return it.compare(it2);
                    } 
                    else {
                        return -1; 
                    } 
                }
                else {
                    ext1 := it.toPath().extname(); 
                    ext2 := it2.toPath().extname(); 
                    
                    comp := ext1.compare(ext2); 
                     
                    if(comp == 0) {
                        return it.compare(it2); 
                    }
                    else {
                        return comp 
                    } 
                } 
            } 

        dirCursor = 0;
        dirScrollTop = 0;
    }
    
    def dirPaneOn() {
        if(fileNames == null) {
            changeDirectory(getcwd());
        }
        
        mode = DIRMODE;
        visibleDirPane = true;
        maxx := getmaxx();
        dirPaneLength = maxx/2;
        makeMaxxy(); 
        makeVisibleTexts()
        clear();
        view();
    } 
    
    def dirPaneOff() {
        maxx := getmaxx();
        dirPaneLength = maxx/6;
        makeMaxxy(); 
        
        visibleDirPane = false;
        dirPaneLength = 0; 
        makeMaxxy(); 
        
        mode = EDITMODE; 
        makeVisibleTexts()
        clear();
        view();
    } 

    def defaultKeyEvents() {
        inherit();

        keyEvents[('W'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-W
            dirPaneOn(); 
        }
    }
    
    def dirView() {
        if(visibleDirPane) { 
            for(i:=0; i<MaxY-1; i++) {
                if(dirCursor == i) {
                    if(i+dirScrollTop < fileNames.length()) {
                        attron(A_REVERSE); 
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                        attroff(A_REVERSE); 
                    }
                    mvprintw(i, dirPaneLength-1, "|");
                }
                else {
                    if(i+dirScrollTop < fileNames.length()) {
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s|", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                    }
                    else { 
                        mvprintw(i, 0, " ".multiply(dirPaneLength-1).append("|"));
                    } 
                } 
            } 
        } 
    } 
    
    def dirPaneIncrementalSearch() {
        maxy := getmaxy();

        status_line_in_search_mode := "";

        end_flag := false;
        
        while(!end_flag) {
            view();
            mvprintw(maxy-1, 0, "/%s", array { status_line_in_search_mode });
            refresh();

            key := getch();
            
            when(key) {
                case (('J' - 'A').to_int +1) {
                    end_flag;
                }
                case (('H' - 'A').to_int + 1) {
                    if(status_line_in_search_mode.length() > 0) {
                        status_line_in_search_mode.delete(-2, -1);
                    }
                }
                else {
                    status_line_in_search_mode.append(key.to_char);
                    
                    n := 0;
                    fileNames.each {
                        if(it.indexOf(status_line_in_search_mode) != -1) {
                            dirScrollTop = n;
                            dirCursor = 0;
                            end_flag = true;
                        }
                        
                        n++;
                    }
                }
            }
        }
    }

    def dirMode(key:int) {
        when(key) {
            case ('j'.to_int, KEY_DOWN) {
                dirCursor++;
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor--; 
                } 
                
                if(dirCursor >= MaxY-1) {
                    dirScrollTop++; 
                    dirCursor--; 
                } 
            }
            case ('k'.to_int, KEY_UP) {
                dirCursor--;
                
                if(dirCursor < 0) {
                    dirScrollTop--; 
                    dirCursor++; 
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case (('D'-'A').to_int+1) {
                dirCursor += MaxY / 2; 
                
                if(dirCursor >= MaxY-2) {
                    dirScrollTop += dirCursor - MaxY + 2;
                    dirCursor = MaxY -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = MaxY -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('U'-'A').to_int+1) {
                dirCursor -= MaxY / 2; 
                
                if(dirCursor < 0) {
                    dirScrollTop += dirCursor;
                    dirCursor = 0;
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case ('g'.to_int) {
                var key = getch();
                
                if(key == 'g'.to_int) {
                    dirScrollTop = 0;
                    dirCursor = 0; 
                } 
            }
            case ('G'.to_int) {
                dirCursor+=9999;
                
                if(dirCursor >= MaxY-2) {
                    dirScrollTop += dirCursor - MaxY + 2;
                    dirCursor = MaxY -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = MaxY -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('W'-'A').to_int+1,('['-'A').to_int+1) {
                dirPaneOff(); 
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                fpath := realpath(dirName.clone().append("/").append(".."));
                writeToFile().if {
                    saveCursorPos();
                    changeDirectory(fpath);
                    fileName = null;
                    texts = SortableList<String>();
                    texts.add("");
                    makeVisibleTexts();
                    fixCursorAndScrollTop(0);
                }
            }

            case ('\n'.to_int) {
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.clone().append("/").append(fname);
                
                if(fpath.toPath().to_stat().S_ISDIR())
                {
                    writeToFile().if {
                        saveCursorPos();
                        changeDirectory(fpath);
                        fileName = null;
                        texts = SortableList<String>();
                        texts.add("");
                        makeVisibleTexts();
                        fixCursorAndScrollTop(0);
                    }
                }
                else {
                    writeToFile().if {
                        saveCursorPos();
                        readFile(fname);
                        dirPaneOff(); 
                    }
                }
            }
            case ('/'.to_int) {
                dirPaneIncrementalSearch();
            }
            case ('f'.to_int) {
                endwin();
                iclover2 -s 'a := grep("-Ine", "", glob("*")).selector().scan(/^(.+):(\\d+)/); vicl_open_file(a.items(1), a.items(2))' -p 19 -c
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();
            }
            case ('!'.to_int) {
                endwin();
                iclover2
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('c'.to_int) {
                endwin();
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.add("/").add(fname);
                cmdline := "cp -r \{fpath} "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('d'.to_int) {
                endwin();
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.add("/").add(fname);
                cmdline := "rm -ir \{fpath} "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('n'.to_int) {
                endwin();
                cmdline := "touch "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case (':'.to_int) {
                enterCommandMode();
            }
            case (('L'-'A').to_int+1) {
                makeVisibleTexts()
                clear();
                view();
            }
        }
    }

    def runKeyEvents(key:int) {
        if(mode == DIRMODE) {
            dirMode(key);
        }
    }

    def saveCursorPos() {
        try {          
            if(access(getCursorPositionDir(), X_OK) != 0) {
                mkdir(getCursorPositionDir(), 0755);
            }
            
            path := getCursorPositionDir().append(fileName);
            (scrollTopY+cursorY+1).toString().write(path);
        } catch(e:Exception) {
        }         
    }
    
    def readFile(fname:String?) {
        file_path := dirName.clone().append("/").append(fname);
        
        if(fname == null) {
            texts = SortableList<String>();
            texts.add("");
             
            fileName = null;
        }
        elif(access(file_path, R_OK) == 0) {
            texts = file_path.toPath().read().toString().split('\n');

            if(texts.length() == 0) {
                texts = SortableList<String>();
                texts.add("");
            }
             
            fileName = fname.clone();

            rehashCCompletion();
        }
        else {
            texts = SortableList<String>();
            texts.add("");
             
            fileName = null;
        }

        var file_line_num = (getCursorPositionDir().append(fileName).toPath()?.read().toString():"-1").to_int();
        cursorX = 0;
        cursorY = 0;
        scrollTopY = 0;
        scrollTopX = 0;

        makeMaxxy();
        makeSpaces();
        
        makeVisibleTexts();

        if(argmentLineNum == -1) {
            argmentLineNum = file_line_num;
        }

        if(argmentLineNum != -1) {
            argmentLineNum--;

            if(argmentLineNum >= texts.length()) {
                argmentLineNum = texts.length()-1;
            }
            if(argmentLineNum < 0) {
                argmentLineNum = 0;
            }

            cursorY = argmentLineNum;

            scrollTopY = cursorY - (MaxY-2) /2;
            
            cursorY -= scrollTopY;

            if(scrollTopY < 0) {
                cursorY += scrollTopY;
                scrollTopY = 0;
            }

            fixCursorAndScrollTop(scrollTopY);

            makeVisibleTexts();
        }

        argmentLineNum = -1;
    
        clearUndoText();
    }
    def openFile(file_path:String, line_num:int) {
        writeToFile().if {
            file_path2 := "";
            
            try {
                file_path2 = realpath(file_path);
            }
            catch(e:Exception) {
            }
            
            dir_name := dirname(file_path2);
            file_name := basename(file_path2);
            changeDirectory(dir_name);
            readFile(file_name);
            
            gotoLine(line_num-1);
        }
    }
}
