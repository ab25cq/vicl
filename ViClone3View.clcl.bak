include "ViClone2ReadFile.clcl"

class ViClone
{
    var cursorX:int;
    var cursorY:int;
    var scrollTopY:int;
    var scrollTopX:int;
    var startPositionOfInsertMode:int;

    var statusLineInCommandMode:String;

    def initialize() {
        inherit();

        cursorX = 0;
        cursorY = 0;
        scrollTopY = 0;
        scrollTopX = 0;
        startPositionOfInsertMode = 0;

        statusLineInCommandMode = "";
    }

    def fixCursorAndScrollTop() {
        var maxy := getmaxy()-1;

        if(cursorY >= maxy) {
            var scroll_size := cursorY - maxy + 1;

            scrollTopY += scroll_size;
            cursorY -= scroll_size;

            if(scrollTopY >= texts.length()) {
                scrollTopY = texts.length()-1;
            }

            if(scrollTopY < 0) {
                scrollTopY = 0;
            }
        }

        if(cursorY < 0) {
            var scroll_size := -cursorY;

            cursorY = 0;
            scrollTopY -= scroll_size;

            if(scrollTopY >= texts.length()) {
                scrollTopY = texts.length()-1;
            }

            if(scrollTopY < 0) {
                scrollTopY = 0;
            }
        }

        if(cursorY >= maxy) {
            cursorY = maxy -1;
        }

        if(scrollTopY + maxy >= texts.length()) {
            var maxy2 := texts.length() - scrollTopY;

            if(cursorY >= maxy2) {
                cursorY = maxy2-1;
            }
        }

        if(cursorY < 0) {
            cursorY = 0;
        }

        var original_line := texts.items(scrollTopY+cursorY);
        if(original_line == null) {
            original_line = "";
        }

        (line, over_maxx) := getLineInsideScreenSize(original_line, false);

        var maxx := getmaxx();

        if(line.equals("")) {
            scrollTopX = 0;
            cursorX = 0;
        }
        elif(cursorX >= maxx-1) {
            if(over_maxx) {
                var scroll_size := cursorX - maxx + 1;

                cursorX -= scroll_size + 1;
                scrollTopX += scroll_size + 1;

                if(scrollTopX >= original_line.length()-maxx+1) {
                    scrollTopX = original_line.length()-maxx+1;
                }
            }
            else {
                cursorX = line.length()-1;
            }
        }
        elif(cursorX >= line.length() && line.length() != 0) {
            cursorX = line.length()-1;
        }
    }

    def getLine():Tuple2<String,Bool> {
        val result = (texts.items(scrollTopY+cursorY)?:"").sub(/./g) {
            if(it.equals("\t")) {
                "⇨";
            }
            elif(iscntrl(it.chars(0))) {
                "↓";
            }
            else {
                it;
            }
        }

        return (result, result.length() >= getmaxx()-1);
    }

    def defaultKeyEvents() {
        inherit();

        keyEvents['j'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY++;

            fixCursorAndScrollTop();
        }
        keyEvents['k'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY--;

            fixCursorAndScrollTop();
        }
        keyEvents['h'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX--;

            fixCursorAndScrollTop();
        }
        keyEvents['l'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX++;

            fixCursorAndScrollTop();
        }
        keyEvents['w'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            (line,over_maxx) := getLine();

            var c = line.chars(scrollTopX+cursorX)?:'\0';

            if(c.isalpha()) {
                while(c.isalpha()) {
                    cursorX++;

                    if(scrollTopX+cursorX >= line.length()-1) {
                        cursorX = 0;
                        cursorY++;
                        scrollTopX = 0;
                        break;
                    }

                    c = line.chars(scrollTopX+cursorX);
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    cursorX++;

                    if(scrollTopX+cursorX >= line.length()-1) {
                        cursorX = 0;
                        cursorY++;
                        scrollTopX = 0;
                        break;
                    }

                    c = line.chars(scrollTopX+cursorX);
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    cursorX++;

                    if(scrollTopX+cursorX >= line.length()-1) {
                        cursorX = 0;
                        cursorY++;
                        scrollTopX = 0;
                        break;
                    }

                    c = line.chars(scrollTopX+cursorX);
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    cursorX++;

                    if(scrollTopX+cursorX >= line.length()-1) {
                        cursorX = 0;
                        cursorY++;
                        scrollTopX = 0;
                        break;
                    }

                    c = line.chars(scrollTopX+cursorX);
                }
            }

            fixCursorAndScrollTop();
        }
        keyEvents['b'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            (line,over_maxx) := getLine();

            if(line.equals("")) {
                cursorX = 9999;
                cursorY--;
            }
            else {
                var c = line.chars(scrollTopX+cursorX);

                if(c.isalpha()) {
                    while(c.isalpha()) {
                        cursorX--;

                        if(scrollTopX+cursorX < 0) {
                            if(cursorY == 0) {
                                cursorX = 0;
                                scrollTopX = 0;
                            }
                            else {
                                cursorX = 9999;
                                cursorY--;
                                scrollTopX = 0;
                            }
                            break;
                        }

                        c = line.chars(scrollTopX+cursorX);
                    }
                }
                elif(c.isdigit()) {
                    while(c.isdigit()) {
                        cursorX--;

                        if(scrollTopX+cursorX < 0) {
                            if(cursorY == 0) {
                                cursorX = 0;
                                scrollTopX = 0;
                            }
                            else {
                                cursorX = 9999;
                                cursorY--;
                                scrollTopX = 0;
                            }
                            break;
                        }

                        c = line.chars(scrollTopX+cursorX);
                    }
                }
                elif(c.isspace()) {
                    while(c.isspace()) {
                        cursorX--;

                        if(scrollTopX+cursorX < 0) {
                            if(cursorY == 0) {
                                cursorX = 0;
                                scrollTopX = 0;
                            }
                            else {
                                cursorX = 9999;
                                cursorY--;
                                scrollTopX = 0;
                            }
                            break;
                        }

                        c = line.chars(scrollTopX+cursorX);
                    }
                }
                else {
                    while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                        cursorX--;

                        if(scrollTopX+cursorX < 0) {
                            if(cursorY == 0) {
                                cursorX = 0;
                                scrollTopX = 0;
                            }
                            else {
                                cursorX = 9999;
                                cursorY--;
                                scrollTopX = 0;
                            }
                            break;
                        }

                        c = line.chars(scrollTopX+cursorX);
                    }
                }
            }

            fixCursorAndScrollTop();
        }
        keyEvents['0'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX = 0;
            scrollTopX = 0;
        }
        keyEvents['$'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var maxx = getmaxx();

            var original_line := texts.items(scrollTopY+cursorY);
            if(original_line == null) {
                original_line = "";
            }
            (line, over_maxx) := getLine();

            if(line.equals("")) {
                cursorX = 0;
            }
            elif(over_maxx) {
                cursorX = line.length()-1;
                scrollTopX = original_line.length()-maxx+1;
            }
            else {
                cursorX = line.length()-1;
            }
        }

        keyEvents[('D'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-D
            var maxy := getmaxy()-1;
            self.cursorY += maxy / 2;

            scrollTopX = 0;

            fixCursorAndScrollTop();

            clear();
            view();
        }
        keyEvents[('U'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-U
            var maxy := getmaxy()-1;
            self.cursorY -= maxy / 2;

            scrollTopX = 0;

            fixCursorAndScrollTop();

            clear();
            view();
        }
        keyEvents['G'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var maxy := getmaxy();
            cursorX = 0;
            scrollTopY = texts.length()-1 -maxy;
            cursorY = maxy -1;
            fixCursorAndScrollTop();
        }
        keyEvents['g'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'g'.to_int) {
                scrollTopY = 0;
                cursorY = 0;
                cursorX = 0;
                fixCursorAndScrollTop();
            }
        }
        keyEvents[('L'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-L
            clear();
            view();
        }
    }

    def view() {
         clearWithoutBlink();

         var maxx := getmaxx();
         var maxy := getmaxy();

         var visible_texts := texts.subList(scrollTopY, scrollTopY + maxy-1);

         var y := 0;
         visible_texts.each {
             (line, over_maxx) := getLineInsideScreenSize(it, cursorY == y);

             ### cursor ####
             if(cursorY == y) {
                 if(line.length() == 0) {
                     attron(A_REVERSE);
                     " ".mvprintw(y,0, "%s");
                     attroff(A_REVERSE);
                 }
                 else {
                     line.subString(0, cursorX).mvprintw(y, 0, "%s");

                     var c := line.chars(cursorX);

                     attron(A_REVERSE);
                     c.toString().mvprintw(y, cursorX, "%s");
                     attroff(A_REVERSE);

                     line.subString(cursorX+1, -1).mvprintw(y, cursorX+1, "%s");

                     if(c == '(') {
                         var nest := 0;
                         var y2 := 0;
                         var find_cursor := false;

                         visible_texts.each {
                             (line, over_maxx) := getLineInsideScreenSize(it, false);

                             var x2 := 0;
                             it.each {
                                 var c := it;

                                 if(y2 == cursorY && x2 == cursorX) {
                                     find_cursor = true;
                                 }
                                 elif(find_cursor) {
                                     if(c == '(') {
                                         nest++;
                                     }
                                     elif(c == ')') {
                                         if(nest == 0) {
                                             attron(A_BOLD);
                                             c.toString().mvprintw(y2, x2, "%s");
                                             attroff(A_BOLD);
                                             return;
                                         }
 
                                         nest--;
                                     }
                                 }

                                 x2++;
                             }

                             y2++;
                         }
                     }
                     elif(c == '{') {
                     }
                 }
             }
             ### visible line ###
             else {
                 if(line.length() != 0) {
                     line.mvprintw(y, 0, "%s");
                 }
             }

             y++;
       }

       if(texts.length() == 0) {
           attron(A_REVERSE);
           if(fileName == null) {
               mvprintw(maxy-1, 0, " %d %d undo(%d:%d)", array { scrollTopY+cursorY, scrollTopX+cursorX, undoIndex, undoTexts.length() });
           }
           else {
               mvprintw(maxy-1, 0, "%s %d %d undo(%d:%d)", array { fileName, scrollTopY+cursorY, scrollTopX+cursorX, undoIndex, undoTexts.length() });
           }
           attroff(A_REVERSE);
       }
       else {
           attron(A_REVERSE);
           if(fileName == null) {
               mvprintw(maxy-1, 0, " %d(%d%%) %d undo(%d:%d)", array { scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX, undoIndex, undoTexts.length() });
           }
           else {
               mvprintw(maxy-1, 0, "%s %d(%d%%) %d undo(%d:%d)", array { fileName, scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX, undoIndex, undoTexts.length() });
           }
           attroff(A_REVERSE);
       }
    }

    def runKeyEvents(key:int) {
        if(mode == EDITMODE) {
            if(keyEvents[key] != null) {
                var key2 := 0;
                when(key) {
                    case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int) {
                        key2 = getch();
                    }
                }
                keyEvents[key](self, key, key2);
            }
        }
    }
}
