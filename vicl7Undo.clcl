include "vicl6.5Brace.clcl"

class ViClone
{
    var undoTexts:SortableList<SortableList<String>>;
    var undoIndex:int;
    var undoCurosrPosition:EqualableList<Tuple3<Integer, Integer, Integer>>;

    def initialize() {
        inherit();

        undoTexts = SortableList<SortableList<String>>();
        undoIndex = 0;

        undoCurosrPosition = EqualableList<Tuple3<Integer, Integer, Integer>>();
    }

    def addUndoText() {
        undoTexts.deleteWithRange(undoIndex, -1);
        undoTexts.push(texts.clone());
        undoCurosrPosition.deleteWithRange(undoIndex, -1);
        undoCurosrPosition.push((scrollTopY, cursorY, cursorX));
        undoIndex++;
    }
    
    def clearUndoText() {
        undoTexts?.clear();
        undoIndex = 0; 
        
        undoCurosrPosition?.clear(); 
    } 

    def defaultKeyEvents() {
        inherit();

        keyEvents['u'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(undoIndex == undoTexts.length()) {
                addUndoText();
                undoIndex--;
            }
            if(undoIndex > 0) {
                undoIndex--;
                texts = undoTexts.items(undoIndex);
    
                makeVisibleTexts();
                
                (scrollTopY, cursorY, cursorX) = undoCurosrPosition.items(undoIndex);

                fixCursorAndScrollTop(scrollTopY);
                
                makeVisibleTexts()
            }
        }
        keyEvents[('R'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {
            if(undoIndex < undoTexts.length()-1) {
                undoIndex++;
                texts = undoTexts.items(undoIndex);
    
                makeVisibleTexts();
                
                (scrollTopY, cursorY, cursorX) = undoCurosrPosition.items(undoIndex);

                fixCursorAndScrollTop(scrollTopY);
                
                makeVisibleTexts()
            }
        }
    }
}
