
class ViClone
{
    var endOfAplication:bool;
    var keyEvents: lambda[](ViClone, int, int);
    var mode: int;
    var runningCurses:static bool;

    enum { EDITMODE, INSERTMODE, COMMANDMODE, SEARCHMODE, VISUALMODE, DIRMODE }

    argmentLineNum:int;

    def initialize() {
        endOfAplication = false;

        mode = EDITMODE;

        keyEvents = new lambda[KEY_MAX](ViClone, int, int)();

        defaultKeyEvents();

        runningCurses = true;
        initscr();
        setEscapeDelay(0);
        keypad(stdscr, true);
        #raw();
        #nodelay(stdscr, true);
        noecho();

        argmentLineNum = -1;
        Clover.ARGV.each {
            if(it.match(/\+\d+/)) {
                argmentLineNum 
                    = it.scan(/\+(\d+)/).items(1).to_int(); 
            }
        } 
        
        var argv = String[Clover.ARGV.length]();
        var argc = 0;
        Clover.ARGV.each {
            if(it.match(/\+\d+/).negative()) {
                argv[argc++] = it;
            }
        }
        
        ### read file ###
        if(argc == 2) {
            fileName = null;
        }
        elif(argc == 3) {
            fileName = argv.items(2);
        }
        else {
            throw Exception("vi clone can't edit multiple files");
        }
    }

    def getch(): int {
        return System.getch();
    }

    def finalize() {
        endwin();
        runningCurses = false;
    }

    def inputStringLine(message:String, default_string:String=""):String  {
        result := default_string.clone();

        while(true) {
            clearWithoutBlink();

            mvprintw(0, 0, message);
            mvprintw(1, 0, "\{result}");

            refresh();

            key := getch();

            when(key) {
                case (('['-'A').to_int+1) {
                    result = "";
                    break;
                }
                case (('J'-'A').to_int+1) {
                    break;
                }
                case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                    result.delete(-2);
                }
                else {
                    result.append(key.to_char);
                }
            }
        }

        return result;
    }
    # result is -1 --> canceled to select
    def selectStrings(message:String, strings:SortableList<String>):int {
        result := -1;

        cursor := 0;
        scroll_top := 0;
        maxy := getmaxy();

        while(true) {
            clearWithoutBlink();

            n := 0;
            mvprintw(0, 0 , message);

            strings.subList(scroll_top, scroll_top+maxy-1).each  {
                if(cursor == n) {
                    attron(A_REVERSE);
                    mvprintw(n+1, 0, it);
                    attroff(A_REVERSE);
                }
                else {
                    mvprintw(n+1, 0, it);
                }
                n++;
            }

            refresh();

            key := getch();

            when(key) {
                case (('['-'A').to_int+1, ('C'-'A').to_int + 1) {
                    break;
                }
                case (KEY_UP, 'k'.to_int) {
                    cursor--;
                }
                case (KEY_DOWN, 'j'.to_int, ('I'-'A').to_int + 1) {
                    cursor++;
                }
                case (('J'-'A').to_int + 1) {
                    result = scroll_top + cursor;
                    break;
                }
            }

            if(cursor >= n) {
                scroll_top++;
                cursor = n -2;

                if(scroll_top >= strings.length()) {
                    scroll_top = strings.length()-1;
                    cursor = strings.length()-1-scroll_top;
                }
            }

            if(cursor < 0) {
                scroll_top--;
                cursor++;

                if(scroll_top < 0) {
                    scroll_top = 0;
                    cursor = 0;
                }
            }
        }

        return result;
    }
    def messageBox(message:String) {
        clearWithoutBlink();
        mvprintw(0,0, message);
        refresh();

        getch();
    }

    def getCursorPositionDir():String {
        "\{getenv("HOME")}/.clover2/vicl/cpos/";
    } 

    def defaultKeyEvents() {
        keyEvents['Z'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'Z'.to_int) {
                writeToFile().if {
                    endOfAplication = true;
                }
            }
        }
    }
    
    
    def insertText(text:String) {
        insert_texts := text.split(/\n/);
        
        if(insert_texts.length() == 1) {
            texts.items(cursorY + scrollTopY)
                .insert(cursorX + scrollTopX, text);
        }
        else {
            first_line := true;
            tail_line :String? = null;
            
            y := cursorY + scrollTopY;
            
            insert_texts.each {
                if(first_line) {
                    line := texts.items(y);
                    line.insert(cursorX + scrollTopX, it);
                    tail_line = line.subString(cursorX + scrollTopX + it.length(), -1);
                    line.delete(cursorX + scrollTopX + it.length(), -1);
                    first_line = false;
                }
                else {
                    texts.insert(y, it);
                }
                
                y++;
            }
            
            if(tail_line != null) {
                texts.insert(y, tail_line);
            }
        }
        
        makeVisibleTexts();
        fixCursorAndScrollTop(scrollTopY);
    }

    def refresh() {
        System.refresh();
    }
}