include "ViClone2ReadFile.clcl"

class ViClone
{
    var cursorX:int;
    var cursorY:int;
    var scrollTopY:int;
    var scrollTopX:int;
    var visibleTexts:SortableList<String>?;

    def initialize() {
        inherit();

        cursorX = 0;
        cursorY = 0;
        scrollTopY = 0;
        scrollTopX = 0;

        visibleTexts = null;
    }

    def fixCursorAndScrollTop() {
        var maxy = getmaxy();

        if(scrollTopY+maxy-1 < texts.length()) {
            if(cursorY >= maxy-2) {
                val scroll_size = cursorY - maxy + 2;
                scrollTopY += scroll_size;
                cursorY -= scroll_size;
            }

            if(cursorY < 0) {
                val scroll_size = -cursorY;

                cursorY = 0;
                scrollTopY -= scroll_size;
            }
        }
        else {
            if(cursorY >= texts.length() -scrollTopY) {
                cursorY = texts.length()-scrollTopY-1;
            }

            if(cursorY < 0) {
                if(scrollTopY > 0) {
                    val scroll_size = -cursorY;

                    cursorY = 0;
                    scrollTopY -= scroll_size;
                }
                else {
                    cursorY = 0;
                }
            }
        }

        if(scrollTopY >= texts.length()) {
            scrollTopY = texts.length()-1;
        }

        if(scrollTopY < 0) {
            scrollTopY = 0;
        }

        (line, over_maxx) := getLine(scrollTopY+cursorY);

        val maxx := getmaxx()-1;

        if(line.equals("")) {
            scrollTopX = 0;
            cursorX = 0;
        }
        
        if(cursorX >= line.length() && line.length() != 0) {
            cursorX = line.length()-1;
        }

        if(cursorX >= maxx-1) {
            if(over_maxx) {
                val scroll_size = cursorX - maxx + 1;

                cursorX -= scroll_size + 1;
                scrollTopX += scroll_size + 1;

                if(scrollTopX >= line.length()-maxx+1) {
                    scrollTopX = line.length()-maxx+1;
                }
            }
            else {
                cursorX = line.length()-1;
            }
        }

        if(cursorX < 0) {
            if(over_maxx) {
                val scroll_size = -cursorX;

                cursorX = 0;
                scrollTopX -= scroll_size;

                if(scrollTopX < 0) {
                    scrollTopX = 0;
                }
            }
            else {
                cursorX = 0;
            }
        }

        visibleTexts = texts.subList(scrollTopY, scrollTopY + maxy-1);
    }

    def getLine(line_num:int):Tuple2<String,Bool> {
        val result = (texts.items(line_num)?:"").sub(/./g) {
            if(it.equals("\t")) {
                "⇨";
            }
            elif(iscntrl(it.chars(0))) {
                "↓";
            }
            else {
                it;
            }
        }

        return (result, result.length() >= getmaxx()-1);
    }

    def forwardWord():Tuple4<Integer, Integer, Integer,Integer> {
        (line,over_maxx) := getLine(scrollTopY+cursorY);

        var c = line?.chars(scrollTopX+cursorX):'\0';

        var x = cursorX;
        var y = cursorY;
        var scrolltop_x = scrollTopX;
        var scrolltop_y = scrollTopY;

        if(line.equals("")) {
            x = 0;
            y++;
        }
        else {
            if(c.isalpha()) {
                while(c.isalpha()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
        }

        return (x, y, scrolltop_x, scrolltop_y);
    }

    def backwardWord():Tuple4<Integer, Integer, Integer,Integer> {
        (line,over_maxx) := getLine(scrollTopY+cursorY);

        var x = cursorX;
        var y = cursorY;
        var scrolltop_x = scrollTopX;
        var scrolltop_y = scrollTopY;

        var c = line?.chars(scrollTopX+cursorX):'\0';

        if(line.equals("")) {
            x = 9999;
            y--;
        }
        else {
            var c = line.chars(scrolltop_x+x)?:'\0';

            if(c.isalpha()) {
                while(c.isalpha()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
        }

        return (x, y, scrolltop_x, scrolltop_y);
    }

    def defaultKeyEvents() {
        inherit();

        keyEvents['j'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY++;

            fixCursorAndScrollTop();
        }
        keyEvents['k'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY--;

            fixCursorAndScrollTop();
        }
        keyEvents['h'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX--;

            fixCursorAndScrollTop();
        }
        keyEvents['l'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX++;

            fixCursorAndScrollTop();
        }
        keyEvents['w'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            (x, y, scrolltop_x, scrolltop_y) := forwardWord();

            cursorX = x;
            cursorY = y;
            scrollTopX = scrolltop_x;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop();
        }
        keyEvents['b'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            (x, y, scrolltop_x, scrolltop_y) := backwardWord();

            cursorX = x;
            cursorY = y;
            scrollTopX = scrolltop_x;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop();
        }
        keyEvents['0'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX = 0;
            scrollTopX = 0;
        }
        keyEvents['$'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX = 9999;

            fixCursorAndScrollTop();
        }
        keyEvents['G'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX = 0;
            cursorY = 999999
            fixCursorAndScrollTop();
        }
        keyEvents['g'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'g'.to_int) {
                cursorX = 0;
                cursorY = 0;
                scrollTopY = 0;
                scrollTopX = 0;
            }
        }

        keyEvents[('D'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-D
            val maxy = getmaxy();
            cursorY += maxy / 2;

            fixCursorAndScrollTop();

            clear();
            view();
        }
        keyEvents[('U'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-U
            val maxy = getmaxy();
            cursorY -= maxy / 2;

            fixCursorAndScrollTop();

            clear();
            view();
        }

        keyEvents[('L'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-L
            clear();
            view();
        }
    }

    def view() {
        clearWithoutBlink();

        val maxx = getmaxx();
        val maxy = getmaxy();

        var y = 0;

        (visibleTexts?.nothing():texts.subList(scrollTopY, scrollTopY + maxy-1)).each {
            (line, over_maxx) := getLine(y+scrollTopY);

            ### cursor line ####
            if(cursorY == y) {
                if(line.length() == 0) {
                    attron(A_REVERSE);
                    " ".mvprintw(y,0, "%s");
                    attroff(A_REVERSE);
                }
                else {
                    line.subString(scrollTopX, scrollTopX+cursorX).mvprintw(y, 0, "%s");

                    val c = line.chars(scrollTopX+cursorX);

                    attron(A_REVERSE);
                    c.toString().mvprintw(y, cursorX, "%s");
                    attroff(A_REVERSE);

                    if(line.length()-scrollTopX > maxx-1) {
                        line.subString(scrollTopX+cursorX+1, scrollTopX+(maxx-1)).mvprintw(y, cursorX+1, "%s");
                    }
                    else {
                        line.subString(scrollTopX+cursorX+1, -1).mvprintw(y, cursorX+1, "%s");
                    }
                }
            }
            ### visible line ###
            else {
                line.subString(0, maxx-1).mvprintw(y, 0, "%s");
            }

            y++;
       }

       attron(A_REVERSE);
       mvprintw(maxy-1, 0, "%s %d %d undo(%d:%d) size(%d,%d) cursor(%d,%d) scroll(%d,%d)", array { (self.fileName?.nothing():""), scrollTopY+cursorY, scrollTopX+cursorX, undoIndex, undoTexts.length(), maxx, maxy, cursorX, cursorY, scrollTopX, scrollTopY });
       attroff(A_REVERSE);
    }

    def runKeyEvents(key:int) {
        if(mode == EDITMODE) {
            if(keyEvents[key] != null) {
                var key2 := 0;
                when(key) {
                    case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int) {
                        key2 = getch();
                    }
                }
                keyEvents[key](self, key, key2);
            }
        }
    }
}
