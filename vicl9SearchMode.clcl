include "vicl8Completion.clcl"

class ViClone
{
    statusLineInSearchMode:String;
    searchMode:int;

    enum { SEARCHMODE_NORMAL, SEARCHMODE_REVERSE }

    def initialize() {
        inherit();

        statusLineInSearchMode = "";

        searchMode = SEARCHMODE_NORMAL;
    }

    def enterSearchMode(str:String="", search_mode:int=SEARCHMODE_NORMAL) {
        searchMode = search_mode;

        mode = SEARCHMODE;

        statusLineInSearchMode = str;
    }

    def searchString() {
        if(searchMode == SEARCHMODE_NORMAL) {
            y := scrollTopY + cursorY;
            x := texts.items(y)
                .subString(scrollTopX+cursorX+1
                                    , -1)
                .indexOf(statusLineInSearchMode);
             
            if(x != -1) { 
                x += scrollTopX + cursorX + 1; 
            }
            else { 
                for(y = scrollTopY+cursorY+1;
                    y < texts.length();
                    y++)
                { 
                    it := texts.items(y);
                     
                    x = it.indexOf(
                        statusLineInSearchMode);
                    
                    if(x != -1) {
                        break; 
                    } 
                }
            } 
            
            if(x == -1) {
                messageBox("The search word is none");
            }
            else {
                scrolltop_y_before := scrollTopY;
                
                if(y >= scrollTopY 
                    && y < scrollTopY + MaxY-1) 
                {
                    cursorY = y - scrollTopY;
                    scrollTopX = 0;
                    cursorX = x; 
                }
                else {
                    scrollTopY = y -10;
                    cursorY = 10;
                    scrollTopX = 0;
                    cursorX = x; 

                    if(scrollTopY < 0) {
                        cursorY += scrollTopY;
                        scrollTopY = 0;
                    }
                }

                fixCursorAndScrollTop(scrolltop_y_before);
            }
        }
        else {
            y := scrollTopY + cursorY;
            x := texts.items(y)
                .subString(0, scrollTopX + cursorX)
                .rindexOf(statusLineInSearchMode);
                 
            if(x == -1) { 
                for(y=scrollTopY+cursorY-1;
                    y >= 0;
                    y--)
                {
                    it := texts.items(y);
                     
                    x = it.rindexOf(statusLineInSearchMode);
    
                    if(x != -1) {
                        break;
                    }
                }
            } 

            if(x == -1) {
                messageBox("The search word is none");
            }
            else {
                scrolltop_y_before := scrollTopY;

                if(y >= scrollTopY 
                    && y < scrollTopY + MaxY-1) 
                {
                    cursorY = y - scrollTopY;
                    scrollTopX = 0;
                    cursorX = x;
                }
                else {
                    scrollTopY = y -10;
                    cursorY = 10;
                    scrollTopX = 0;
                    cursorX = x;

                    if(scrollTopY < 0) {
                        cursorY += scrollTopY;
                        scrollTopY = 0;
                    }
                }

                fixCursorAndScrollTop(scrolltop_y_before);
            }
        }
    }

    def defaultKeyEvents() {
        inherit();

        ### Insert Mode ###
        keyEvents['/'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterSearchMode();
        }
        keyEvents['?'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterSearchMode("", SEARCHMODE_REVERSE);
        }
        keyEvents['n'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            searchString();
        }
        keyEvents['*'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            line := texts.items(scrollTopY+cursorY);

            str := "";

            if(line != null) {
                x := cursorX;
                c := line.chars(scrollTopX+x);

                if(c.isalnum() || c == '_') {
                    while((c.isalnum() || c == '_')
                        && (scrollTopX+x < line.length())) 
                    {
                        str.append(c);
                        x++; 
                        c = line.chars(scrollTopX+x); 
                    }
                     
                    enterSearchMode(str, SEARCHMODE_NORMAL);
                }
            }
        } 
        keyEvents['#'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            val line = texts.items(scrollTopY+cursorY);

            var str = "";

            if(line != null) {
                var x = cursorX;
                var c = line.chars(scrollTopX+x);

                if(c.isalpha()) {
                    while(c.isalpha()) {
                        str.append(c);
                        x++; 
                        c = line.chars(scrollTopX+x); 
                    }
                }
                elif(c.isdigit()) {
                    while(c.isdigit()) {
                        str.append(c);
                        x++; 
                        c = line.chars(scrollTopX+x); 
                    }
                }
                elif(c.isspace()) {
                    while(c.isspace()) {
                        str.append(c);
                        x++; 
                        c = line.chars(scrollTopX+x); 
                    }
                }
                else {
                    while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                        str.append(c);
                        x++; 
                        c = line.chars(scrollTopX+cursorX+x);
                    }
                }
            }

            enterSearchMode(str, SEARCHMODE_REVERSE);
        } 
        keyEvents['N'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var mode = searchMode;
            if(searchMode == SEARCHMODE_NORMAL) {
                searchMode = SEARCHMODE_REVERSE
            }
            else {
                searchMode = SEARCHMODE_NORMAL
            }
            searchString();
            searchMode = mode;
        }
    }

    def searchMode(key:int) {
        when(key) {
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInSearchMode.delete(-2);
            }
            case (('['-'A').to_int+1) {
                mode = EDITMODE; 
            } 
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                searchString();
                mode = EDITMODE; 
            }
            else {
                if(key >= ' ' && key <= '~') {
                    statusLineInSearchMode.append(key.to_char);
                }
            }
        }
    }

    def runKeyEvents(key:int) {
        if(mode == SEARCHMODE) {
            searchMode(key);
        }
        else {
            inherit(key);
        }
    }

    def view() {
        inherit();

        if(mode == SEARCHMODE) {
            clearStatusLine();

            maxy := getmaxy();

            attron(A_REVERSE);
            if(searchMode == SEARCHMODE_NORMAL) {
                mvprintw(maxy-1, 0, "/%s", array { statusLineInSearchMode });
            }
            else {
                mvprintw(maxy-1, 0, "?%s", array { statusLineInSearchMode });
            }
            attroff(A_REVERSE);
        }
    }
}