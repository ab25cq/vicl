include "vicl8Completion.clcl"

class ViClone
{
    statusLineInSearchMode:String;
    searchMode:int;

    enum { SEARCHMODE_NORMAL, SEARCHMODE_REVERSE }

    def initialize() {
        inherit();

        statusLineInSearchMode = "";

        searchMode = SEARCHMODE_NORMAL;
    }

    def enterSearchMode(str:String="", search_mode:int=SEARCHMODE_NORMAL) {
        searchMode = search_mode;

        mode = SEARCHMODE;

        statusLineInSearchMode = str;
    }
    
    def runSearchMode(str:String, search_mode:int=SEARCHMODE_NORMAL) {
        searchMode = search_mode;
        statusLineInCommandMode = str;
        searchString();
    }

    def searchString() {
        if(searchMode == SEARCHMODE_NORMAL) {
            y := getRealPosY();
            x := texts.items(y).subString(getRealPosX()+1, -1).indexOf(statusLineInSearchMode);
             
            if(x != -1) { 
                x += getRealPosX() + 1;
            }
            else { 
                for(y = getRealPosY()+1; y < texts.length(); y++) { 
                    it := texts.items(y);
                    x = it.indexOf(statusLineInSearchMode);
                    if(x != -1) {
                        break; 
                    } 
                }
            } 
            
            if(x == -1) {
                messageBox("The search word is none");
            }
            else {
                scrolltop_y_before := scrollTopY;
                moveCursor(y, x);
                fixCursorAndScrollTop(scrolltop_y_before);
            }
        }
        else {
            y := getRealPosY();
            x := texts.items(y).subString(0, getRealPosX()).rindexOf(statusLineInSearchMode);
                 
            if(x == -1) { 
                for(y=getRealPosY()-1; y >= 0; y--) {
                    it := texts.items(y);

                    x = it.rindexOf(statusLineInSearchMode);
    
                    if(x != -1) {
                        break;
                    }
                }
            } 

            if(x == -1) {
                messageBox("The search word is none");
            }
            else {
                scrolltop_y_before := scrollTopY;
                moveCursor(y, x);
                fixCursorAndScrollTop(scrolltop_y_before);
            }
        }
    }
    
    def getCursorWord():String {
        word_top := 0;
        word_bottom := 0;
        
        x := getRealPosX();
        y := getRealPosY();

        (y2, x2) := forwardWord();
        (y3, x3) := backwardWord();

        line := texts.items(y);

        if(y2 > y && y3 < y) {
            word_top = 0;
            word_bottom = -1;
        }
        elif(y2 > y) {
            word_top = x3;
            word_bottom = -1;
        }
        elif(y3 < y) {
            word_top = 0;
            word_bottom = x2;
        }
        else {
            word_top = x3;
            word_bottom = x2;
        }

        return line.subString(word_top, word_bottom);
    }

    def defaultKeyEvents() {
        inherit();

        ### Insert Mode ###
        keyEvents['/'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterSearchMode();
        }
        keyEvents['?'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterSearchMode("", SEARCHMODE_REVERSE);
        }
        keyEvents['n'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            searchString();
        }
        keyEvents['*'.to_int] = lambda(self:ViClone, key:int, key2:int) 
        {
            str := getCursorWord();
            enterSearchMode(str, SEARCHMODE_NORMAL);
        }
        keyEvents['#'.to_int] = lambda(self:ViClone, key:int, key2:int) 
        {
            str := getCursorWord();
            enterSearchMode(str, SEARCHMODE_REVERSE);
        } 
        keyEvents['N'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            mode := searchMode;
            if(searchMode == SEARCHMODE_NORMAL) {
                searchMode = SEARCHMODE_REVERSE
            }
            else {
                searchMode = SEARCHMODE_NORMAL
            }
            searchString();
            searchMode = mode;
        }
    }

    def searchMode(key:int) {
        when(key) {
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInSearchMode.delete(-2);
            }
            case (('['-'A').to_int+1) {
                mode = EDITMODE; 
            } 
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                searchString();
                mode = EDITMODE; 
            }
            else {
                if(key >= ' ' && key <= '~') {
                    statusLineInSearchMode.append(key.to_char);
                }
            }
        }
    }

    def runKeyEvents(key:int, key2:int) {
        if(mode == SEARCHMODE) {
            searchMode(key);
        }
        else {
            inherit(key, key2);
        }
    }

    def view() {
        inherit();

        if(mode == SEARCHMODE) {
            clearStatusLine();

            maxy := getmaxy();

            attron(A_REVERSE);
            if(searchMode == SEARCHMODE_NORMAL) {
                mvprintw(maxy-1, 0, "/%s", array { statusLineInSearchMode });
            }
            else {
                mvprintw(maxy-1, 0, "?%s", array { statusLineInSearchMode });
            }
            attroff(A_REVERSE);
        }
    }
}