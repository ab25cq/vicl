include "vicl13dot.clcl"

class ViClone
{
    ccompletionCandidates: SortableList<String>;
    
    def initialize() {
        inherit();

        rehashCCompletion();
    }

    def rehashCCompletion() {
        if(fileName.match(/.+\.c/)) {
            ccompletionCandidates = SortableList<String>();
            
            ccompletionCandidates.append(getCFuncTags())
            #ccompletionCandidates.append(getCMacros());
        }
    }

    def getCMacros():SortableList<String> {
        result := SortableList<String>();

        gcc("-I", ".", "-E","-dM", "-x", "c", fileName).toString().scan(regex "#define ([a-zA-Z_]+)") {
            |match_string:String, group_strings:SortableList<String>|:String

            result.add(group_strings.items(0));
        }

        return result;
    }

    def getCFuncTags():SortableList<String> {
        return bash("-c", "gcc -I. -E \{dirName}/\{fileName}| grep extern | sed -r 's/^extern [a-zA-Z0-9_]+ \\*?([a-zA-Z0-9_]+ \\(.+)/\\1/'").toString().split(/\n/);
    }

    def topLevelCCompletion() {
        words := ccompletionCandidates;
        words.append(texts.join("\n").scan(/[a-zA-Z_]+/));
        
        (inputing_text,j) := gettingInputingWord();
        completion_core(inputing_text, j, words)
    }

    def CCompletion() {
        topLevelCCompletion();
    }
}
