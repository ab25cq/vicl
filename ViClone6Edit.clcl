include "ViClone5CommandMode.clcl"

class ViClone
{
    def getCursorChar(): char {
        return texts.subList(scrollTopY, scrollTopY + getmaxy()-1).items(cursorY).chars(cursorX);
    }

    def defaultKeyEvents() {
        inherit();

        keyEvents['%'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var c := getCursorChar();

            if(c == '(') {
            }
        }

        keyEvents['J'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            var line := texts.items(cursorY + scrollTopY);

            var next_line := texts.items(cursorY + scrollTopY + 1);

            if(line.identifyWith(null).negative() && next_line.identifyWith(null).negative()) {
                cursorX = line.length();

                line.append(" ");
                line.append(next_line);

                texts.deleteAt(scrollTopY+cursorY+1);

                makeVisibleTexts();
                fixCursorAndScrollTop(scrollTopY);
            }
        }
        keyEvents['d'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            when(key2) {
                case ('e'.to_int, 'w'.to_int) {
                    var line := texts.items(scrollTopY+cursorY);

                    if(line.identifyWith(null).negative()) {
                        var c := line.chars(scrollTopX+cursorX);

                        if(c.isalpha()) {
                            while(c.isalpha()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        elif(c.isdigit()) {
                            while(c.isdigit()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        elif(c.isspace()) {
                            while(c.isspace()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        else {
                            while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                    }

                    makeVisibleTexts();                     
                    fixCursorAndScrollTop(scrollTopY);
                }
                case ('d'.to_int) {
                    var original_line := texts.items(cursorY + scrollTopY);

                    clearClipBoard();
                    addClipBoard(texts.items(scrollTopY+cursorY));

                    if(original_line.identifyWith(null).negative()) {
                        texts.deleteAt(scrollTopY+cursorY);
                    }

                    if(texts.length() == 0) {
                        texts.add("");
                        scrollTopX = 0;
                        cursorX = 0;
                    }

                    makeVisibleTexts();                     
                    fixCursorAndScrollTop(scrollTopY);
                }
            }
        }
        keyEvents['x'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var original_line := texts.items(cursorY + scrollTopY);

            if(original_line.identifyWith(null).negative()) {
                addUndoText();

                original_line.delete(cursorX + scrollTopX);

                makeVisibleTexts();
                fixCursorAndScrollTop(scrollTopY);
            }
        }
        keyEvents['D'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var original_line := texts.items(cursorY + scrollTopY);

            if(original_line.identifyWith(null).negative()) {
                addUndoText();

                original_line.delete(cursorX + scrollTopX, -1);

                makeVisibleTexts();
                fixCursorAndScrollTop(scrollTopY);
            }
        }
    }
}
