include "vicl7Undo.clcl"

class ViClone
{
    def initialize() {
        inherit();
    }

    def getMethodDefinitionTop(): Tuple2<Integer, Integer> {
        for(i:=getRealPosY()-1; i>=0; i--) {
            line := texts.items(i);

            if(line.match(/def\s+.+\(/)) {
                for(y := i; y<texts.length(); y++) {
                    line := texts.items(y);

                    x := line.indexOf("{");

                    if(x != -1) {
                        return (y, x);
                    }
                }
            }
        }

        return (-1, -1)
    }
    def getNextmethodDefinitionTop(): Tuple2<Integer, Integer> {
        for(i:=getRealPosY()+1; i<texts.length(); i++) {
            line := texts.items(i);

            if(line.match(/def\s+.+\(/)) {
                for(y := i; y<texts.length(); y++) {
                    line := texts.items(y);

                    x := line.indexOf("{");

                    if(x != -1) {
                        return (y, x);
                    }
                }
            }
        }

        return (-1, -1)
    }
    
    
    def defaultKeyEvents() {
        inherit();

        keyEvents['['.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(key2) {
                case ('['.to_int) {
                    (y, x) := getMethodDefinitionTop();

                    if(y != -1 && x != -1) {
                        moveCursor(y, x);
                    }
                }
            }
        }

        keyEvents[']'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(key2) {
                case (']'.to_int) {
                    (y, x) := getNextmethodDefinitionTop();

                    if(y != -1 && x != -1) {
                        moveCursor(y, x);
                    }
                }
            }
        }
    }

    def methodNameCompletion(line:String) {
        line2 := line.scan(/\s*(.+)\..*$/).items(1);
        
        type_name := line2.toCommand().tyclover2().toString();
        
        type_name2 := type_name.chomp();
        if(type_name2.match(/\s*(.+)\s*/)) {
            type_name2 = type_name2.scan(/\s*(.+)\s*/).items(0);
        }
        
        boxing_type_name := Clover.primitiveClassToBoxingClass(type_name2);
        
        class_name := boxing_type_name;
        if(boxing_type_name.match(/.+<.+>/)) {
            class_name = boxing_type_name.scan(/(.+)<.+>/).items(0);
        }
        
        klass := Class(class_name);

        methods := klass.getMethods();

        words := SortableList<String>();
        methods.each {
            words.add(it.methodNameAndParams);
        }

        ### getting inputing word ###
        inputing_text := "";
        for(i:=getRealPosX()-1; i >= 0; i--) {
            if(line.chars(i).isalnum() || line.chars(i) == '_') 
            {
                inputing_text.insert(0, line.chars(i)); 
            }
            elif(line.chars(i) == '\.') {
                break;
            }
            else {
                break; 
            } 
        }
        if(i < 0) {
            i = 0;
        }
        else {
            i++;
        }

        candidates := words.map { 
            it.subString(0, MaxX-1) 
        }.select { 
            it.indexOf(inputing_text) == 0 && !it.equals(inputing_text)
        }.sort()
        .uniq();

        if(candidates.length() == 0) {
        }
        elif(candidates.length() == 1) {
            selected_string := candidates.items(0).scan(/^(.+\()/).items(1);

            line.delete(i, getRealPosX()); 
            line.insert(i, selected_string);
            cursorX += selected_string.length() - (getRealPosX() - i)
        }
        else {
            index := selectStrings(line.subString(0, MaxX-1), candidates);

            if(index != -1) {
                selected_string := candidates.items(index).scan(/^(.+\()/).items(1);
                line.delete(i, getRealPosX());
                line.insert(i, selected_string);
                cursorX += selected_string.length() - (getRealPosX() - i)
            }
        }
    }
    
    def clover2Completion() {
        line := texts.items(getRealPosY());
        
        if(line.match(/(.+)\..*/)) {
            methodNameCompletion(line);
        }
    }
    
    def completion() {
        words := texts.join("\n").scan(/[a-zA-Z_]+/);
        line := texts.items(getRealPosY());
        
        ### getting inputing word ###
        var inputing_text = "";
        for(i:=getRealPosX()-1; i >= 0; i--) {
            if(line.chars(i).isalnum() || line.chars(i) == '_') 
            {
                inputing_text.insert(0, line.chars(i)); 
            } 
            else {
                break; 
            } 
        }
        if(i < 0) {
            i = 0;
        }
        else {
            i++;
        }

        candidates := words.map { 
            it.subString(0, MaxX-1) 
        }.select { 
            it.indexOf(inputing_text) == 0 && !it.equals(inputing_text)
        }.sort()
        .uniq();

        if(candidates.length() == 0) {
        }
        elif(candidates.length() == 1) {
            selected_string := candidates.items(0);

            line.delete(i, getRealPosX()); 
            line.insert(i, selected_string);
            cursorX += selected_string.length() - (getRealPosX() - i)
        }
        else {
            index := selectStrings(line.subString(0, MaxX-1), candidates);

            if(index != -1) {
                selected_string := candidates.items(index);
                line.delete(i, getRealPosX());
                line.insert(i, selected_string);
                cursorX += selected_string.length() - (getRealPosX() - i)
            }
        }
    } 
}