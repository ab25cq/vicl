include "vicl2DirPane.clcl"

class ViClone
{
    var texts:SortableList<String>;

    var cursorX:int;
    var cursorY:int;
    var scrollTopY:int;
    var scrollTopX:int;
    var visibleTexts:SortableList<String>?;

    var SpaceString1: String;
    var SpaceString2: String;

    var MaxX:int;
    var MaxY:int;

    def saveCursorPos() {
        try {          
            if(access(getCursorPositionDir(), X_OK) != 0) {
                mkdir(getCursorPositionDir(), 0755);
            }
            
            path := getCursorPositionDir().append(fileName);
            (scrollTopY+cursorY+1).toString().write(path);
        } catch(e:Exception) {
        }         
    }
    
    def readFile(fname:String) {
        if(fname == null) {
            texts = SortableList<String>();
            texts.add("");
             
            fileName = null;
        }
        elif(access(fname, R_OK) == 0) {
            texts = fname.toPath().read().toString().split(/\n/);

            if(texts.length() == 0) {
                texts = SortableList<String>();
                texts.add("");
            }
             
            fileName = fname.clone();
        }
        else {
            texts = SortableList<String>();
            texts.add("");
             
            fileName = null;
        }

        var file_line_num = (getCursorPositionDir().append(fileName).toPath()?.read().toString():"-1").to_int();
        cursorX = 0;
        cursorY = 0;
        scrollTopY = 0;
        scrollTopX = 0;

        makeMaxxy();
        makeSpaces();
        
        makeVisibleTexts();

        if(argmentLineNum == -1) {
            argmentLineNum = file_line_num;
        }

        if(argmentLineNum != -1) {
            argmentLineNum--;

            if(argmentLineNum >= texts.length()) {
                argmentLineNum = texts.length()-1;
            }
            if(argmentLineNum < 0) {
                argmentLineNum = 0;
            }

            cursorY = argmentLineNum;

            scrollTopY = cursorY - (MaxY-2) /2;
            
            cursorY -= scrollTopY;

            if(scrollTopY < 0) {
                cursorY += scrollTopY;
                scrollTopY = 0;
            }

            fixCursorAndScrollTop(scrollTopY);

            makeVisibleTexts();
        }
        
        if(fileName != null) { 
            setDirCursor(fileName); 
        } 

        argmentLineNum = -1;
    
        clearUndoText();
    }
    
    def initialize() {
        inherit();

        readFile(fileName);
    }

    def makeMaxxy() {
        MaxX = getmaxx() - dirPaneLength;
        MaxY = getmaxy();
    }

    def makeVisibleTexts() {
        visibleTexts = texts.subList(scrollTopY, scrollTopY + MaxY-1).map {
            var result = "";
            it.each {
                if(it == '\t') {
                    result.append("⇨");
                }
                elif(iscntrl(it)) {
                    result.append("↓");
                }
                else {
                    result.append(it);
                }
            }

            result;
        }
    }

    def fixCursorAndScrollTop(scrolltop_y_before:int) {
        if(scrollTopY >= texts.length()) {
            scrollTopY = texts.length()-1;
        }

        if(scrollTopY < 0) {
            scrollTopY = 0;
        }

        if(scrollTopY+MaxY-1 < texts.length()) {
            if(cursorY >= MaxY-2) {
                scroll_size := cursorY - MaxY + 2;
                scrollTopY += scroll_size;
                cursorY -= scroll_size;
            }

            if(cursorY < 0) {
                scroll_size := -cursorY;

                cursorY = 0;
                scrollTopY -= scroll_size;
            }
        }
        else {
            if(cursorY >= texts.length() -scrollTopY) {
                cursorY = texts.length()-scrollTopY-1;
            }

            if(cursorY < 0) {
                if(scrollTopY > 0) {
                    val scroll_size = -cursorY;

                    cursorY = 0;
                    scrollTopY -= scroll_size;
                }
                else {
                    cursorY = 0;
                }
            }
        }

        if(scrollTopY >= texts.length()) {
            cursorY = 0;
            scrollTopY = texts.length()-1;
        }

        if(scrollTopY < 0) {
            scrollTopY = 0;
        }

        line := texts.items(scrollTopY+cursorY);

        if(line == null || line.equals("")) {
            scrollTopX = 0;
            cursorX = 0;
        }
        else {
            var over_maxx = line.length() >= MaxX-1;

            val maxx = MaxX-1;
            
            if(cursorX >= line.length() && line.length() != 0) {
                cursorX = line.length()-1;
            }

            if(cursorX >= maxx-1) {
                if(over_maxx) {
                    val scroll_size = cursorX - maxx + 1;

                    cursorX -= scroll_size + 1;
                    scrollTopX += scroll_size + 1;

                    if(scrollTopX >= line.length()-maxx+1) {
                        scrollTopX = line.length()-maxx+1;
                    }
                }
                else {
                    cursorX = line.length()-1;
                }
            }

            if(cursorX < 0) {
                if(over_maxx) {
                    val scroll_size = -cursorX;

                    cursorX = 0;
                    scrollTopX -= scroll_size;

                    if(scrollTopX < 0) {
                        scrollTopX = 0;
                    }
                }
                else {
                    cursorX = 0;
                }
            }
        }

        if(scrolltop_y_before != scrollTopY) {
            makeVisibleTexts();
        }
    }
    
    def getLine(line_num:int):Tuple2<String,Bool> {
        val result = (texts.items(line_num)?:"").sub(/./g) {
            if(it.equals("\t")) {
                "⇨";
            }
            elif(iscntrl(it?.chars(0)?:'\0')) {
                "↓";
            }
            else {
                it;
            }
        }

        return (result, result.length() >= MaxX-1);
    }

    def forwardWord(offset:int=0):Tuple4<Integer, Integer, Integer,Integer> {
        var line = visibleTexts.items(cursorY);
        var over_maxx = line.length() >= MaxX-1;

        var x = cursorX + offset;
        var y = cursorY;
        var scrolltop_x = scrollTopX;
        var scrolltop_y = scrollTopY;

        var c = line?.chars(scrolltop_x+x):'\0';

        if(line.equals("")) {
            x = 0;
            y++;
        }
        else {
            if(c.isalpha() || c == '_') {
                while(c.isalpha() || c == '_') {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }
                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x++;

                    if(scrolltop_x+x >= line.length()-1) {
                        x = 0;
                        y++;
                        scrolltop_x = 0;
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
        }

        return (x, y, scrolltop_x, scrolltop_y);
    }
    
    def backwardWord(offset:int=0):Tuple4<Integer, Integer, Integer,Integer> {
        var line = visibleTexts.items(cursorY);

        var x = cursorX + offset;
        var y = cursorY;
        var scrolltop_x = scrollTopX;
        var scrolltop_y = scrollTopY;

        var c = line?.chars(scrolltop_x+x):'\0';
        
        if(line.equals("")) {
            x = 9999;
            y--;
        }
        else {
            var c = line.chars(scrolltop_x+x)?:'\0';

            if(c.isalpha() || c == '_') {
                while(c.isalpha() || c == '_') {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x--;

                    if(scrolltop_x+x < 0) {
                        if(y == 0) {
                            x = 0;
                            scrolltop_x = 0;
                        }
                        else {
                            x = 9999;
                            y--;
                            scrolltop_x = 0;
                        }
                        break;
                    }

                    c = line?.chars(scrolltop_x+x):'\0';
                }
            }
            x++; 
        }

        return (x, y, scrolltop_x, scrolltop_y);
    }

    def defaultKeyEvents() {
        inherit();

        keyEvents['j'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            cursorY++;
            scrollTopX = 0; 

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents[KEY_DOWN] = keyEvents['j'.to_int];
        keyEvents['k'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY--;
            scrollTopX = 0; 

            fixCursorAndScrollTop(scrollTopY);
        }
        keyEvents[KEY_UP] = keyEvents['k'.to_int];
        keyEvents['h'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX--;

            fixCursorAndScrollTop(scrollTopY);
        }
        keyEvents[KEY_LEFT] = keyEvents['h'.to_int];
        keyEvents['l'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX++;

            fixCursorAndScrollTop(scrollTopY);
        }
        keyEvents[KEY_RIGHT] = keyEvents['l'.to_int];
        keyEvents['w'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            (x, y, scrolltop_x, scrolltop_y) := forwardWord();

            cursorX = x;
            cursorY = y;
            scrollTopX = scrolltop_x;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['b'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            (x, y, scrolltop_x, scrolltop_y) := backwardWord();

            cursorX = x -1;
            cursorY = y;
            scrollTopX = scrolltop_x;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['0'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            cursorX = 0;
            scrollTopX = 0;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['$'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            cursorX = 9999;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['G'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            var scrolltop_y_before = scrollTopY;

            cursorX = 0;
            cursorY = 999999

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['g'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'g'.to_int) {
                var scrolltop_y_before = scrollTopY;

                cursorX = 0;
                cursorY = 0;
                scrollTopY = 0;
                scrollTopX = 0;

                fixCursorAndScrollTop(scrolltop_y_before);
            }
        }

        keyEvents[('D'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-D
            var scrolltop_y_before = scrollTopY;

            cursorY += MaxY / 2;
            scrollTopX = 0; 

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents[('U'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-U
            var scrolltop_y_before = scrollTopY;

            cursorY -= MaxY / 2;
            scrollTopX = 0; 

            fixCursorAndScrollTop(scrolltop_y_before);
        }

        keyEvents[('L'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-L
            makeVisibleTexts()
            clear();
            view();
        }
    }
    
    def makeSpaces() {
        var maxx = getmaxx();

        SpaceString1 = " ".multiply(maxx);
        SpaceString2 = " ".multiply(maxx-1);
    }

    def clearWithoutBlink() {
        var maxy = getmaxy();

        for(i:=0; i<maxy-1; i++) {
            if(i == maxy -1) {
                mvprintw(i,0, SpaceString2);
            }
            else {
                mvprintw(i, 0, SpaceString1);
            }
        }
    }

    def view() {
        clearWithoutBlink(); 
        
        dirView(); 

        var y = 0;
        
        visibleTexts.each {
            over_maxx := it.length() >= MaxX-1;

            ### cursor line ####
            if(cursorY == y) {
                if(it.length() == 0) {
                    attron(A_REVERSE);
                    mvprintw(y,0+dirPaneLength
                        , " ");
                    attroff(A_REVERSE);
                }
                else {
                    mvprintw(y, 0+dirPaneLength
                        , it.subString(scrollTopX
                        , scrollTopX+cursorX));

                    val c = it.chars(
                        scrollTopX+cursorX);

                    attron(A_REVERSE);
                    mvprintw(y
                        , cursorX+dirPaneLength
                        , c.toString());
                    attroff(A_REVERSE);

                    if(it.length()-scrollTopX > MaxX-1) {
                        mvprintw(y
                            , cursorX+1+dirPaneLength, it.subString(scrollTopX+cursorX+1, scrollTopX+(MaxX-1)));
                    }
                    else {
                        mvprintw(y, cursorX+1+dirPaneLength, it.subString(scrollTopX+cursorX+1, -1));
                    }
                }
            }
            ### visible line ###
            else {
                mvprintw(y, 0+dirPaneLength, it.subString(0, MaxX-1));
            }

            y++;
       }

       attron(A_REVERSE);
       try {
           mvprintw(MaxY-1, 0, "%s %d %d undo(%d:%d) size(%d,%d) cursor(%d,%d) scroll(%d,%d)", array { (self.fileName?.nothing():""), scrollTopY+cursorY, scrollTopX+cursorX, undoIndex, undoTexts.length(), MaxX, MaxY, cursorX, cursorY, scrollTopX, scrollTopY });
       }
       catch (e:Exception) {
       }
       attroff(A_REVERSE);
    }

    def runKeyEvents(key:int) {
        if(mode == EDITMODE) {
            if(keyEvents[key] != null) {
                var key2 := 0;
                when(key) {
                    case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int) {
                        key2 = getch();
                    }
                }
                keyEvents[key](self, key, key2);
            }
        }
        else {
            inherit(key);
        }
    }
}