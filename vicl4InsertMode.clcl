include "vicl3View.clcl"

class ViClone
{
    tabSize:int;
    var startPositionOfInsertMode:int;
     
    def initialize() {
        inherit();
        
        startPositionOfInsertMode = 0;
        tabSize = 4; 
    }

    def enterNewLine(no_tails_getting:bool) {
        scrolltop_y_before := scrollTopY;

        line := texts.items(scrollTopY+cursorY)?.filter{it}:"";

        tails := "";
        if(!no_tails_getting) {
            tails = line.subString((scrollTopX+cursorX)..-1);
            line.delete((scrollTopX+cursorX)..-1);
        }

        spaces_num := 0;

        try {
            spaces_num = line.scan(/^\s+/).items(0).length();
            cursorX = spaces_num;
        } catch(e:Exception) {
            spaces_num = -1;
            cursorX = 0;
        }

        scrollTopX = 0;
        cursorY++;
        
        spaces := " ".multiply(spaces_num);
        spaces.append(tails);
        texts.insert(cursorY+scrollTopY, spaces);

        makeVisibleTexts();

        startPositionOfInsertMode = cursorX + scrollTopX;
    }

    def enterInsertMode() {
        mode = INSERTMODE;
        startPositionOfInsertMode = cursorX + scrollTopX;
    }

    def defaultKeyEvents() {
        inherit();

        ### Insert Mode ###
        keyEvents['i'.to_int] = lambda(self:ViClone, key:int, key2:int) {
           addUndoText();

           enterInsertMode();
        }

        keyEvents['a'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            var maxx := getmaxx();
            
            line := texts.items(scrollTopY+cursorY);
            
            if(scrollTopX + cursorX < line.length()) {
                cursorX++;
    
                if(cursorX >= maxx-1) {
                    scrollTopX++;
                    cursorX--;
                }
            } 

            enterInsertMode();
        }
        keyEvents['A'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            var maxx := getmaxx();

            (line,over_max) := getLine(scrollTopY+cursorY);

            if(line.length() > maxx-1) {
                scrollTopX = line.length() - maxx +2;
                cursorX = maxx-2;
            }
            else {
                cursorX = line.length();
            }

            enterInsertMode();
        }
        keyEvents['o'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            enterNewLine(true);

            enterInsertMode();
        }
        keyEvents['c'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();
             
            when(key2) {
                case ('e'.to_int, 'w'.to_int) {
                    (x,y,scrolltop_x, scrolltop_y) := forwardWord(0); 
                 
                    var line = texts.items(scrollTopY+cursorY);
                    
                    if(y > cursorY) {
                        line.delete(scrollTopX+cursorX, -1);
    
                        makeVisibleTexts();                     
                        fixCursorAndScrollTop(scrollTopY);
            
                        cursorX++;
            
                        if(cursorX >= MaxX-1) {
                            scrollTopX++;
                            cursorX--;
                        }
                    } 
                    else { 
                        line.delete(scrollTopX+cursorX, scrolltop_x+x); 
    
                        makeVisibleTexts();                     
                        fixCursorAndScrollTop(scrollTopY);
                    } 
                     
                    enterInsertMode();
                }
                case ('d'.to_int) {
                }
            }
        }
        keyEvents[('L'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-L
            makeVisibleTexts()
            clear();
            view();
        }
    }

    def insertMode(key:int) {
        when(key) {
            case (('['-'A').to_int+1) {
                mode = EDITMODE;
            }
            
            case (('V'-'A').to_int+1) {
                key = getch(); 
                 
                var maxx := getmaxx();
                var line := texts.items(cursorY + scrollTopY);

                if(line != null) {
                    var c := key.to_char;
                    if(c == '\t') {
                        line.insert(cursorX + scrollTopX, "\t");
                        cursorX++; 
                    } 
                    elif(c.isalnum() || c == ' ' || c.isgraph())  {
                        line.insert(cursorX + scrollTopX, c.toString());
                        cursorX++;
                    }
                    
                    if(cursorX >= maxx-1) {
                        scrollTopX++;
                        cursorX--; 
                    } 
                }
                
                makeVisibleTexts();
            } 

            ### Backspace ###
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                val line = texts.items(scrollTopY + cursorY);
                
                if(line != null) {
                    line.delete(scrollTopX + cursorX -1);
                    cursorX--; 
                } 
                
                makeVisibleTexts();
            }

            ### delete Back word ###
            case (('W'-'A').to_int+1) {
                line := texts.items(scrollTopY + cursorY);

                (x, y, scroll_x, scroll_y) 
                    := backwardWord(-1);
                
                if(line != null) {
                    if(y < cursorY) {
                        line.setValue(""); 
                        cursorX = 0;
                        scrollTopX = 0;
                    } 
                    else { 
                        (cursorX - x).times {
                            line.delete(
                                scrollTopX+cursorX-1);
                            cursorX--; 
                        }
                    } 
                } 
                #cursorX++; 
                
                makeVisibleTexts();
            }
            
            case (('D'-'A').to_int+1) {
                val line = texts.items(scrollTopY + cursorY);
                
                if(line != null) {
                    4.times { 
                        line.delete(scrollTopX+cursorX-1);
                        cursorX --; 
                    } 
                } 
                
                makeVisibleTexts();
            } 

            case ('\n'.to_int) {
                enterNewLine(false);
                
                makeVisibleTexts();
            }

            case (('I'-'A').to_int+1) {
                addUndoText();

                var line = texts
                    .items(cursorY+scrollTopY);

                if(line != null) {
                    if(line
                       .subString(0, scrollTopX+cursorX)
                       .match(/^\s*$/)) 
                    {
                        4.times { 
                            line.insert(cursorX+scrollTopX
                                        , " ");
                            cursorX++;
                        } 
                    }
                    else {
                        completion();
                    }
                }
                
                makeVisibleTexts();
            }
            else {
                var line = texts.items(cursorY + scrollTopY);
                var vline = visibleTexts.items(cursorY);

                if(line != null && vline != null) {
                    var c := key.to_char;
                    if(c.isalnum() || c == ' ' || c.isgraph()) {
                        line.insert(cursorX + scrollTopX, c.toString());
                        vline.insert(cursorX + scrollTopX, c.toString());
                        cursorX++;

                        if(cursorX >= MaxX-1) {
                            scrollTopX++;
                            cursorX--;
                        }
                    }
                }
            }
        }
    }

    def runKeyEvents(key:int) {
        if(mode == INSERTMODE) {
            modifiedText = true;
            insertMode(key);
        }
        else {
            inherit(key);
        }
    }

    def clearStatusLine() {
        var maxy = getmaxy();
        var maxx = getmaxx();

        var line := " ".multiply(maxx-1);

        mvprintw(maxy-1, 0, line);
    }

    def view() {
        inherit(); 

        if(mode == INSERTMODE) {
            maxy := getmaxy();

            clearStatusLine();

            if(texts.length() == 0) {
                attron(A_REVERSE);
                if(fileName == null) {
                    mvprintw(maxy-1, 0, "INSERT  %d %d", array { scrollTopY+cursorY, scrollTopX+cursorX });
                }
                else {
                    mvprintw(maxy-1, 0, "INSERT %s %d %d", array { fileName, scrollTopY+cursorY, scrollTopX+cursorX });
                }
                attroff(A_REVERSE);
            }
            else {
                attron(A_REVERSE);
                if(fileName == null) {
                    mvprintw(maxy-1, 0, "INSERT  %d(%d%%) %d", array { scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX });
                }
                else {
                    mvprintw(maxy-1, 0, "INSERT %s %d(%d%%) %d", array { fileName, scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX });
                }
                attroff(A_REVERSE);
            }
        }
    }
}