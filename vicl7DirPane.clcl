inherit ViClone
{
    dirName:String;
    dirScrollTop: int;
    dirCursor:int; 
    visibleDirPane: bool
    fileNames: SortableList<String>?;

    def enterCommandMode():dynamic {}
    def rehashCCompletion():dynamic {}
    
    def initialize():dynamic {
        inherit();

        fileNames = null;
        
        dirScrollTop = 0; 
        dirCursor = 0; 
        
        visibleDirPane = false;
        
        dirName = getcwd();
        #changeDirectory(getcwd());

        readFile(win.fileName);

        keyEvents[('W'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-W
            dirPaneOn(); 
        }

        keyEvents['Z'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'Z'.to_int) {
                writeToFile();
                endOfAplication = true;
            }
        }
    }

    def writeToFile() {
        fname := dirName.clone().append("/").append(win.fileName);

        if(access(fname, W_OK) == 0) {
            win.texts.join("\n").write(fname);
        }
    }
    
    def changeDirectory(path:String) {
        dirName = path.clone();
        rereadDir();
        if(win.fileName != null) { 
            setDirCursor(win.fileName); 
        }
    } 
    
    def setDirCursor(fname:String) {
        dirCursor = fileNames.indexOf(fname).filter { if(it == -1) { 0 } else { it } };

        maxy := getmaxy();
        
        dirScrollTop = dirCursor - (maxy-2) / 2; 
        
        dirCursor -= dirScrollTop;
        
        if(dirScrollTop < 0) {
            dirCursor += dirScrollTop; 
            dirScrollTop = 0; 
        } 
    } 
    
    def rereadDir() {
        fileNames = dirName.toPath().entries().map { it.toPath().basename().toString() }
            .sort {
                if(it.chars(0) == '.') {
                    if(it2.chars(0) == '.') { 
                        return it.compare(it2);
                    } 
                    else {
                        return -1; 
                    } 
                }
                else {
                    ext1 := it.toPath().extname(); 
                    ext2 := it2.toPath().extname(); 
                    
                    comp := ext1.compare(ext2); 
                     
                    if(comp == 0) {
                        return it.compare(it2); 
                    }
                    else {
                        return comp 
                    } 
                } 
            } 

        dirCursor = 0;
        dirScrollTop = 0;
    }
    
    def dirPaneOn() {
        if(fileNames == null) {
            changeDirectory(getcwd());
        }
        
        mode = DIRMODE;
        visibleDirPane = true;
        maxx := getmaxx();
        dirPaneLength = maxx/2;
        win.makeMaxxy(self); 
        win.makeVisibleTexts()
        clear();
        view();
    } 
    
    def dirPaneOff() {
        maxx := getmaxx();
        dirPaneLength = maxx/6;
        win.makeMaxxy(self); 
        
        visibleDirPane = false;
        dirPaneLength = 0; 
        win.makeMaxxy(self); 
        
        mode = EDITMODE; 
        win.makeVisibleTexts()
        clear();
        view();
    } 
    
    def dirView() {
        if(visibleDirPane) { 
            maxy := getmaxy();

            for(i:=0; i<maxy-1; i++) {
                if(dirCursor == i) {
                    if(i+dirScrollTop < fileNames.length()) {
                        attron(A_REVERSE); 
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                        attroff(A_REVERSE); 
                    }
                    mvprintw(i, dirPaneLength-1, "|");
                }
                else {
                    if(i+dirScrollTop < fileNames.length()) {
                        mvprintw(i, 0, "%-\{dirPaneLength-1}s|", array { fileNames.items(i+dirScrollTop).subString(0, dirPaneLength-1) });
                    }
                    else { 
                        mvprintw(i, 0, " ".multiply(dirPaneLength-1).append("|"));
                    } 
                } 
            } 
        } 
    } 
    
    def dirPaneIncrementalSearch() {
        maxy := getmaxy();

        status_line_in_search_mode := "";

        end_flag := false;
        
        while(!end_flag) {
            view();
            mvprintw(maxy-1, 0, "/%s", array { status_line_in_search_mode });
            refresh();

            key := getch();
            
            when(key) {
                case (('J' - 'A').to_int +1) {
                    end_flag;
                }
                case (('H' - 'A').to_int + 1) {
                    if(status_line_in_search_mode.length() > 0) {
                        status_line_in_search_mode.delete(-2, -1);
                    }
                }
                else {
                    status_line_in_search_mode.append(key.to_char);
                    
                    n := 0;
                    fileNames.each {
                        if(it.indexOf(status_line_in_search_mode) != -1) {
                            dirScrollTop = n;
                            dirCursor = 0;
                            end_flag = true;
                        }
                        
                        n++;
                    }
                }
            }
        }
    }

    def dirMode(key:int) {
        when(key) {
            case ('j'.to_int, KEY_DOWN) {
                dirCursor++;
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor--; 
                } 
                
                if(dirCursor >= getmaxy()-1) {
                    dirScrollTop++; 
                    dirCursor--; 
                } 
            }
            case ('k'.to_int, KEY_UP) {
                dirCursor--;
                
                if(dirCursor < 0) {
                    dirScrollTop--; 
                    dirCursor++; 
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case (('D'-'A').to_int+1) {
                maxy := getmaxy();

                dirCursor += maxy / 2; 
                
                if(dirCursor >= maxy-2) {
                    dirScrollTop += dirCursor - maxy + 2;
                    dirCursor = maxy -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = maxy -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('U'-'A').to_int+1) {
                maxy := getmaxy();

                dirCursor -= maxy / 2; 
                
                if(dirCursor < 0) {
                    dirScrollTop += dirCursor;
                    dirCursor = 0;
                    
                    if(dirScrollTop < 0) {
                        dirScrollTop = 0; 
                    } 
                } 
            }
            case ('g'.to_int) {
                var key = getch();
                
                if(key == 'g'.to_int) {
                    dirScrollTop = 0;
                    dirCursor = 0; 
                } 
            }
            case ('G'.to_int) {
                maxy := getmaxy();

                dirCursor+=9999;
                
                if(dirCursor >= maxy-2) {
                    dirScrollTop += dirCursor - maxy + 2;
                    dirCursor = maxy -2; 
                } 
                
                if(dirCursor+dirScrollTop >= fileNames.length()) {
                    dirCursor = maxy -2; 
                    dirScrollTop = fileNames.length() - dirCursor - 1; 
                } 
            }
            case (('W'-'A').to_int+1,('['-'A').to_int+1) {
                dirPaneOff(); 
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                writeToFile()
                saveCursorPos();

                fpath := realpath(dirName.clone().append("/").append(".."));
                changeDirectory(fpath);
                win.fileName = null;
                win.texts = SortableList<String>();
                win.texts.push("");
                win.makeVisibleTexts();
                win.fixCursorAndScrollTop(0);
            }

            case ('\n'.to_int) {
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.clone().append("/").append(fname);
                
                if(fpath.toPath().to_stat().S_ISDIR())
                {
                    writeToFile();
                    saveCursorPos();
                    changeDirectory(fpath);
                    win.fileName = null;
                    win.texts = SortableList<String>();
                    win.texts.push("");
                    win.makeVisibleTexts();
                    win.fixCursorAndScrollTop(0);
                }
                else {
                    writeToFile();
                    saveCursorPos();
                    readFile(fname);
                    dirPaneOff(); 
                }
            }
            case ('/'.to_int) {
                dirPaneIncrementalSearch();
            }
            case ('f'.to_int) {
                endwin();
                iclover2 -s 'a := grep("-Ine", "", glob("*")).selector().scan(/^(.+):(\\d+)/); vicl_open_file(a.items(1), a.items(2))' -p 19 -c
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();
            }
            case ('!'.to_int) {
                endwin();
                iclover2
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('c'.to_int) {
                endwin();
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.add("/").add(fname);
                cmdline := "cp -r \{fpath} "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('d'.to_int) {
                endwin();
                fname := fileNames.items(dirScrollTop+dirCursor);
                fpath := dirName.add("/").add(fname);
                cmdline := "rm -ir \{fpath} "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case ('n'.to_int) {
                endwin();
                cmdline := "touch "
                iclover2("-c", "--controlling-terminal", "-s", cmdline);
                initscr();
                setEscapeDelay(0);
                keypad(stdscr, true);
                raw();
                noecho();

                rereadDir();
            }
            case (':'.to_int) {
                enterCommandMode();
            }
            case (('L'-'A').to_int+1) {
                win.makeVisibleTexts()
                clear();
                view();
            }
        }
    }

    def runKeyEvents(key:int, key2:int):dynamic {
        if(mode == DIRMODE) {
            dirMode(key);
        }
        else {
            inherit(key, key2);
        }
    }

    def saveCursorPos() {
        try {          
            if(access(getCursorPositionDir(), X_OK) != 0) {
                mkdir(getCursorPositionDir(), 0755);
            }
            
            path := getCursorPositionDir().append(win.fileName);
            (win.scrollTopY+win.cursorY+1).toString().write(path);
        } catch(e:Exception) {
        }
    }

    def readFile(fname:String?) {
        file_path := dirName.clone().append("/").append(fname);
        
        if(fname == null) {
            win.texts = SortableList<String>();
            win.texts.push("");
             
            win.fileName = null;
        }
        elif(access(file_path, R_OK) == 0) {
            win.texts = file_path.toPath().read().toString().split('\n');

            if(win.texts.length() == 0) {
                win.texts = SortableList<String>();
                win.texts.push("");
            }

            win.fileName = fname.clone();

            rehashCCompletion();
        }
        else {
            win.texts = SortableList<String>();
            win.texts.push("");
             
            win.fileName = null;
        }

        file_line_num := (getCursorPositionDir().append(win.fileName).toPath()?.read().toString():"-1").to_int();
        win.cursorX = 0;
        win.cursorY = 0;
        win.scrollTopY = 0;
        win.scrollTopX = 0;

        win.makeMaxxy(self);
        
        win.makeVisibleTexts();

        if(argLineNum == -1) {
            argLineNum = file_line_num;
        }

        if(argLineNum != -1) {
            argLineNum--;

            if(argLineNum >= win.texts.length()) {
                argLineNum = win.texts.length()-1;
            }
            if(argLineNum < 0) {
                argLineNum = 0;
            }

            win.cursorY = argLineNum;

            maxy := getmaxy();

            win.scrollTopY = win.cursorY - (maxy-2) /2;
            
            win.cursorY -= win.scrollTopY;

            if(win.scrollTopY < 0) {
                win.cursorY += win.scrollTopY;
                win.scrollTopY = 0;
            }

            win.fixCursorAndScrollTop(win.scrollTopY);

            win.makeVisibleTexts();
        }

        argLineNum = -1;
    
        win.clearUndoText();
    }

    def getCursorPositionDir():String {
        "\{getenv("HOME")}/.clover2/vicl/cpos/";
    } 
    def openFile(file_path:String, line_num:int) {
        writeToFile();
        file_path2 := "";
        
        try {
            file_path2 = realpath(file_path);
        }
        catch(e:Exception) {
        }
        
        dir_name := dirname(file_path2);
        file_name := basename(file_path2);
        changeDirectory(dir_name);
        readFile(file_name);
        
        gotoLine(line_num-1);
    }

    def insertText(text:String) {
        insert_texts := text.split(/\n/);
        
        if(insert_texts.length() == 1) {
            win.texts.items(win.cursorY + win.scrollTopY).insert(win.cursorX + win.scrollTopX, text);
        }
        else {
            first_line := true;
            tail_line :String? = null;
            
            y := win.cursorY + win.scrollTopY;
            
            insert_texts.each {
                if(first_line) {
                    line := win.texts.items(y);
                    line.insert(win.cursorX + win.scrollTopX, it);
                    tail_line = line.subString(win.cursorX + win.scrollTopX + it.length(), -1);
                    line.delete(win.cursorX + win.scrollTopX + it.length(), -1);
                    first_line = false;
                }
                else {
                    win.texts.insert(y, it);
                }
                
                y++;
            }
            
            if(tail_line != null) {
                win.texts.insert(y, tail_line);
            }
        }
        
        win.makeVisibleTexts();
        win.fixCursorAndScrollTop(win.scrollTopY);
    }

    def main():static {
        vicl = ViClone();

        sockfd := socket(AF_UNIX, SOCK_STREAM,  0);

        saddr := sockaddr_un();

        saddr.sun_family = AF_UNIX;
        saddr.sun_path = getenv("HOME").append("/.clover2/vicl/socket");

        rm("-rf", saddr.sun_path);

        bind(sockfd, saddr);
        listen(sockfd, 1);

        mask := fd_set();
        read_ok := fd_set();

        FD_ZERO(mask);
        FD_SET(0, mask);
        FD_SET(sockfd, mask);

        loop_num := 0;

        while(!vicl.endOfAplication) {
            vicl.clearWithoutBlink(); 
            vicl.clearStatusLine();
            vicl.dirView();
            vicl.view();
            vicl.statusView();
            refresh();

            read_ok = mask.clone();

            result := select(sockfd+1, read_ok, null, null, null);

            if(FD_ISSET(0, read_ok)) {
                key := getch();

                key2 := 0;

                if(vicl.mode == ViClone.EDITMODE) {
                    when(key) {
                        case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int, 'z'.to_int, '['.to_int, ']'.to_int, '`'.to_int, 'm'.to_int, 't'.to_int) 
                        {
                            key2 = getch();
                        }
                    }
                }

                vicl.runKeyEvents(key, key2);
            }
            elif(FD_ISSET(sockfd, read_ok)) {
                caddr := sockaddr_un();
                csockfd := accept(sockfd, caddr);

                buf := Buffer(128);
                read(csockfd, buf, 128);
                
                message := buf.toString();
                
                if(message.match(/^OPEN_FILE .+ \d+$/)) {
                    array := message.scan(/^OPEN_FILE (.+) (\d+)/)
                    
                    file_name := array.items(1);
                    line_num := array.items(2).to_int();
                    
                    vicl.openFile(file_name, line_num);
                    
                    vicl.dirPaneOff()
                    vicl.setDirCursor(file_name)
                }
                elif(message.match(/^INSERT_FILE .+$/)) {
                    array := message.scan(/^INSERT_FILE (.+)$/)
                    
                    file_name := array.items(1).chomp();

                    text := file_name.toPath().read().toString();
                    
                    vicl.win.addUndoText();
                    vicl.insertText(text);
                }
            }

            if(loop_num % 256 == 0) {
                Clover.compaction();
            }
            
            loop_num++;
        }

        close(sockfd);
    }
    
    def gotoLine(y:int) {
        win.scrollTopY = y;
        win.cursorX = 0;
        win.cursorY = 0;
        win.makeVisibleTexts();
    }
}
