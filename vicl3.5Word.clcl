include "vicl3.3View.clcl"

class ViClone
{
    def fixCursorAndScrollTop(scrolltop_y_before:int) {
        inherit(scrolltop_y_before);

        if(mode == EDITMODE) {
            line := visibleTexts.items(cursorY);

            if(line != null) {
                if(cursorX >= line.length()) {
                    cursorX = line.length()-1;
                }

                if(cursorX < 0) {
                    cursorX = 0;
                }
            }
        }
    }
    def forwardWord(offset:int=0):Tuple3<Integer, Integer,Integer> {
        line := visibleTexts.items(cursorY);

        x := cursorX + offset;
        y := cursorY;
        scrolltop_y := scrollTopY;

        c := line?.chars(x):'\0';

        if(line == null || line.equals("")) {
            x = 0;
            y++;
        }
        else {
            if(c.isalpha() || c == '_') {
                while(c.isalpha() || c == '_') {
                    x++;

                    if(x >= line.length()-1) {
                        x = 0;
                        y++;
                        line = visibleTexts.items(y);
                    }
                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x++;

                    if(x >= line.length()-1) {
                        x = 0;
                        y++;
                        line = visibleTexts.items(y);
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x++;

                    if(x >= line.length()-1) {
                        x = 0;
                        y++;
                        line = visibleTexts.items(y);
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x++;

                    if(x >= line.length()-1) {
                        x = 0;
                        y++;
                        line = visibleTexts.items(y);
                    }

                    c = line?.chars(x):'\0';
                }
            }
        }

        return (x, y, scrolltop_y);
    }

    def backwardWord(offset:int=0):Tuple3<Integer, Integer,Integer> {
        line := visibleTexts.items(cursorY);

        x := cursorX + offset;
        y := cursorY;
        scrolltop_y := scrollTopY;

        c := line?.chars(x):'\0';
        
        if(line == null || line.equals("")) {
            y--;
            if(y >= 0) {
                line = visibleTexts.items(y);
                x = line.length()-1;
            }
            else {
                x = 9999;
            }
        }
        else {
            c := line.chars(x)?:'\0';

            if(c.isalpha() || c == '_') {
                while(c.isalpha() || c == '_') {
                    x--;

                    if(x < 0) {
                        y--;

                        if(y < 0) {
                            if(scrolltop_y + y == -1) {
                                x = 0;
                                y = 0;
                            }
                            else {
                                x = 9999;
                            }
                            break;
                        }
                        else {
                            line = visibleTexts.items(y);
                            x = line.length()-1;
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isdigit()) {
                while(c.isdigit()) {
                    x--;

                    if(x < 0) {
                        y--;

                        if(y < 0) {
                            if(scrolltop_y + y == -1) {
                                x = 0;
                                y = 0;
                            }
                            else {
                                x = 9999;
                            }
                            break;
                        }
                        else {
                            line = visibleTexts.items(y);
                            x = line.length()-1;
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c.isspace()) {
                while(c.isspace()) {
                    x--;

                    if(x < 0) {
                        y--;

                        if(y < 0) {
                            if(scrolltop_y + y == -1) {
                                x = 0;
                                y = 0;
                            }
                            else {
                                x = 9999;
                            }
                            break;
                        }
                        else {
                            line = visibleTexts.items(y);
                            x = line.length()-1;
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            elif(c != '\0') {
                while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                    x--;

                    if(x < 0) {
                        y--;

                        if(y < 0) {
                            if(scrolltop_y + y == -1) {
                                x = 0;
                                y = 0;
                            }
                            else {
                                x = 9999;
                            }
                            break;
                        }
                        else {
                            line = visibleTexts.items(y);
                            x = line.length()-1;
                        }
                    }

                    c = line?.chars(x):'\0';
                }
            }
            x++; 
        }

        return (x, y, scrolltop_y);
    }
    def defaultKeyEvents() {
        inherit();

        keyEvents['w'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            scrolltop_y_before := scrollTopY;

            (x, y, scrolltop_y) := forwardWord();

            cursorX = x;
            cursorY = y;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
        keyEvents['b'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            scrolltop_y_before := scrollTopY;

            (x, y, scrolltop_y) := backwardWord();

            cursorX = x -1;
            cursorY = y;
            scrollTopY = scrolltop_y;

            fixCursorAndScrollTop(scrolltop_y_before);
        }
    }
}
