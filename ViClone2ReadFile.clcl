include "ViClone.clcl"

class ViClone
{
    var texts:SortableList<String>;
    var fileName:String?;

    def initialize() {
        inherit();

        ### read file ###
        if(Clover.ARGV.length() == 2) {
            texts = SortableList<String>();
            texts.add("");
            fileName = null;
        }
        elif(Clover.ARGV.length() == 3) {
            var fname := Clover.ARGV.items(2);
            if(access(fname, R_OK) == 0) {
                texts = fname.toPath().read().toString().split(/\n/);

                if(texts.length() == 0) {
                    texts = SortableList<String>();
                    texts.add("");
                }
            }
            else {
                texts = SortableList<String>();
                texts.add("");
            }
            fileName = fname.clone();
        }
        else {
            throw Exception("vi clone can't edit multiple files");
        }
    }

    def inputStringLine(message:String, default_string:String=""):String {
        var result := default_string.clone();

        while(true) {
            clearWithoutBlink();

            mvprintw(0, 0, message);
            mvprintw(1, 0, "\{result}");

            refresh();

            var key := getch();

            when(key) {
                case (('['-'A').to_int+1) {
                    result = "";
                    break;
                }
                case (('J'-'A').to_int+1) {
                    break;
                }
                case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                    result.delete(-2);
                }
                else {
                    result.append(key.to_char);
                }
            }
        }

        return result;
    }
    # result is -1 --> canceled to select
    def selectStrings(message:String, strings:List<String>):int {
        var result := -1;

        var cursor := 0;
        var scroll_top := 0;
        var maxy := getmaxy();

        while(true) {
            clearWithoutBlink();

            var n := 0;
            mvprintw(0, 0, message);
            strings.subList(scroll_top, scroll_top+maxy-1).each {
                if(cursor == n) {
                    attron(A_REVERSE);
                    mvprintw(n+1, 0, it);
                    attroff(A_REVERSE);
                }
                else {
                    mvprintw(n+1, 0, it);
                }
                n++;
            }

            refresh();

            var key := getch();

            when(key) {
                case (('['-'A').to_int+1) {
                    break;
                }
                case (KEY_UP, 'k'.to_int) {
                    cursor--;
                }
                case (KEY_DOWN, 'j'.to_int) {
                    cursor++;
                }
                case (('J'-'A').to_int + 1) {
                    result = scroll_top + cursor;
                    break;
                }
            }

            if(cursor >= n) {
                scroll_top++;
                cursor = n -2;

                if(scroll_top >= strings.length()) {
                    scroll_top = strings.length()-1;
                    cursor = strings.length()-1-scroll_top;
                }
            }

            if(cursor < 0) {
                scroll_top--;
                cursor++;

                if(scroll_top < 0) {
                    scroll_top = 0;
                    cursor = 0;
                }
            }
        }

        return result;
    }
    def messageBox(message:String) {
        clearWithoutBlink();
        mvprintw(0,0, message);
        refresh();

        getch();
    }

    def getCursorPositionDir():String {
        "\{getenv("HOME")}/.clover2/vicl/cpos/";
    } 
    def writeToFile():bool {
        if(fileName == null) {
            fileName = inputStringLine("input file name:");
            
            if(access(fileName, F_OK) == 0) {
                var n := selectStrings("overwite to \{fileName}?", list { "yes", "no" });

                if(n == 0) {
                    if(access(fileName, W_OK) == 0) {
                        texts.join("\n").write(fileName);
                    }
                    else {
                        messageBox("permission denied \{fileName}");
                        return false;
                    }
                }
            }
            else {
                try {
                    texts.join("\n").write(fileName);
                }
                catch(e:Exception) {
                    messageBox("vicl can't write file. (\{fileName})");
                    return false;
                }
            }
        }
        else {
            if(access(fileName, W_OK) == 0) {
                texts.join("\n").write(fileName);
            }
            else {
                messageBox("permission denyed \{fileName}");
                return false;
            }
        }

         
        try {          
            if(access(getCursorPositionDir(), X_OK) != 0) {
                mkdir(getCursorPositionDir(), 0755);
            }
            
            path := getCursorPositionDir().append(fileName);
            scrollTopY.toString().write(path);
        } catch(e:Exception) {
        }         

        return true;
    }
    def defaultKeyEvents() {
        keyEvents['Z'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'Z'.to_int) {
                writeToFile().if {
                    endOfAplication = true;
                }
            }
        }
    }

    def refresh():static {
        System.refresh();
    }
}
