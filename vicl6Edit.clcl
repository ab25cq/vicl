include "vicl5CommandMode.clcl"

class ViClone
{
    def defaultKeyEvents() {
        inherit();

        keyEvents['J'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            real_pos_y := getRealPosY();
            real_pos_x := getRealPosX();

            line := texts.items(real_pos_y);
            next_line := texts.items(real_pos_y +1);

            if(line.identifyWith(null).negative() && next_line.identifyWith(null).negative()) 
            {
                (y, x) := realPosToViewPos(real_pos_y, line.length()-1);

                line.append(" ");
                if(next_line.length() != 0) {
                    line.append(next_line.scan(/\s*(.+)/).items(1));
                }

                (cursorY, cursorX) = (y, x+1);

                texts.deleteAt(real_pos_y+1);

                makeVisibleTexts();
                fixCursorAndScrollTop(scrollTopY);
            }
        }
        keyEvents['d'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            addUndoText();

            when(key2) {
                case ('e'.to_int, 'w'.to_int) {
                    real_y := getRealPosY();
                    real_x := getRealPosX();

                    (x,y, scrolltop_y) := forwardWord(0); 

                    try {
                        (y2, x2, line_size2) := viewPosToRealPos(y, x);

                        if(y2 != real_y) {
                            y2 = real_y;
                            x2 = -1;
                        }

                        line := texts.items(y2);
                        
                        line.delete(real_x, x2);

                        makeVisibleTexts();                     
                        fixCursorAndScrollTop(scrollTopY);
                    }
                    catch (e:Exception) {
                        cursorX = getRealPosX();
                        scrollTopY = getRealPosY();
                        cursorY = 0;

                        makeVisibleTexts();
                        fixCursorAndScrollTop(scrollTopY);
                        real_y := getRealPosY();
                        real_x := getRealPosX();

                        (x,y, scrolltop_y) := forwardWord(0); 

                        (y2, x2, line_size2) := viewPosToRealPos(y, x);

                        if(y2 != real_y) {
                            y2 = real_y;
                            x2 = -1;
                        }

                        line := texts.items(y2);
                        
                        line.delete(real_x, x2);

                        makeVisibleTexts();                     
                        fixCursorAndScrollTop(scrollTopY);
                    }
                }
                case ('d'.to_int) {
                    y := getRealPosY();

                    line := texts.items(y);

                    if(line != null) {
                        clearClipBoard();
                        addClipBoard(line);
                        texts.deleteAt(y);
                    }

                    if(texts.length() == 0) {
                        texts.add("");
                        cursorX = 0;
                        cursorY = 0;
                        scrollTopY = 0;
                    }

                    makeVisibleTexts();                     
                    fixCursorAndScrollTop(scrollTopY);
                }
            }
        }
        keyEvents['x'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            line := texts.items(getRealPosY());

            if(line != null) {
                x := getRealPosX();

                if(x < line.length()) 
                {
                    addUndoText();
                    
                    line.delete(x);

                    makeVisibleTexts();
                } 
            }
        }
        keyEvents['D'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            x := getRealPosX();
            y := getRealPosY();

            line := texts.items(y);

            if(line.identifyWith(null).negative() && x < line.length()-1) {
                addUndoText();

                line.delete(x, -1);

                makeVisibleTexts();
                fixCursorAndScrollTop(scrollTopY);
            }
        }
        keyEvents['z'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(key2) {
                case ('z'.to_int) {
                    y := getRealPosY();
                    x := getRealPosX();

                    scroll_size := (MaxY-1)/2;
                    scrollTopY = getRealPosY() - scroll_size;

                    fixCursorAndScrollTop(scrollTopY);
                    makeVisibleTexts();

                    (cursorY, cursorX) = realPosToViewPos(y, x);

                    makeVisibleTexts();
                }

                case (KEY_ENTER, ('J'-'A').to_int+1) {
                    cursorX = getRealPosX();
                    scrollTopY = getRealPosY();
                    cursorY = 0;

                    makeVisibleTexts();
                    fixCursorAndScrollTop(scrollTopY);
                }
            }
        }
    }
}
