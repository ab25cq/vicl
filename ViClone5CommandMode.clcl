include "ViClone4InsertMode.clcl"

class ViClone
{
    var modifiedText:bool;
    var statusLineInCommandMode:String;

    def initialize() {
        inherit();

        statusLineInCommandMode = "";
        modifiedText = false;
    }

    def commandMode(key:int) {
        when(key) {
            case ('w'.to_int) {
                statusLineInCommandMode.append("w");
            }
            case ('q'.to_int) {
                statusLineInCommandMode.append("q");
            }
            case ('!'.to_int) {
                statusLineInCommandMode.append("!");
            }
            case (('['-'A').to_int+1) {
                mode = EDITMODE;
                statusLineInCommandMode = "";
                addUndoText();
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInCommandMode.delete(-2);
            }
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                if(statusLineInCommandMode.match(/w/) && statusLineInCommandMode.match(/q/)) {
                    writeToFile().if {
                        endOfAplication = true;
                        saveCursorPos();
                    }
                }
                elif(statusLineInCommandMode.match(/q/) && statusLineInCommandMode.match(/!/)) {
                    endOfAplication = true;

                    saveCursorPos();
                }
                elif(statusLineInCommandMode.match(/w/)) {
                    writeToFile().if {
                        modifiedText = false;
                        saveCursorPos();
                    }
                }
                elif(statusLineInCommandMode.match(/q/)) {
                    if(!modifiedText) {
                        endOfAplication = true;
                    }

                    saveCursorPos();
                }

                mode = EDITMODE;
                statusLineInCommandMode = "";
            }
        }
    }
    def view() {
        inherit();
         
        if(mode == COMMANDMODE) {
            maxy := getmaxy();

            clearStatusLine();

            attron(A_REVERSE);
            mvprintw(maxy-1, 0, ":\{statusLineInCommandMode}");
            attroff(A_REVERSE);
        }
    }

    def defaultKeyEvents() {
        inherit();

        keyEvents[':'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            mode = COMMANDMODE;
            statusLineInCommandMode = "";
        }
    }
    def runKeyEvents(key:int) {
        if(mode == COMMANDMODE) {
            commandMode(key);
        }
        else {
            inherit(key);
        }
    }
}
