
class ViClone
{
    endOfAplication:bool;
    cursorX:int;
    cursorY:int;
    scrollTopY:int;
    scrollTopX:int;
    mode: int;
    keyEvents: lambda[](ViClone, int, int);
    fileName:String;
    startPositionOfInsertMode:int;
    tabSize:int;
    statusLineInCommandMode:String;
    modifiedText:bool;

    texts:EqualableList<String>;

    enum { EDITMODE, INSERTMODE, COMMANDMODE }

    def initialize() {
        endOfAplication = false;
        cursorX = 0;
        cursorY = 0;
        scrollTopY = 0;
        scrollTopX = 0;
        startPositionOfInsertMode = 0;
        tabSize = 4;
        statusLineInCommandMode = "";

        mode = EDITMODE;

        keyEvents = new lambda[KEY_MAX](ViClone, int, int)();

        ### read file ###
        if(Clover.ARGV.length() == 2) {
            texts = EqualableList<String>();
        }
        elif(Clover.ARGV.length() == 3) {
            fname := Clover.ARGV.items(2);
            if(access(fname, W_OK) == 0) {
                texts = fname.toPath().read().toString().split(/\n/);

                if(texts.length() == 0) {
                    texts = EqualableList<String>();
                    texts.add("");
                }
            }
            else {
                texts = EqualableList<String>();
                texts.add("");
            }
            fileName = fname.clone();
        }
        else {
            throw Exception("vi clone can't edit multiple files");
        }

        modifiedText = false;

        ### start cursesw ###
        initscr();
        keypad(stdscr, true);
        noecho();

        ### default key events ###
        defaultKeyEnvents();
    }

    def finalize() {
        endwin();
    }

    def getLineInsideScreenSize(original_line: String, cursor_line:bool):Tuple2<String,Bool> {
        maxx := getmaxx();

        start_line := 0;
        if(cursor_line) {
            start_line = scrollTopX;
        }

        result := "";
        n := 0;
        for(i:=start_line; i<original_line.length(); i++) {
            c := original_line.chars(i);

            if(c == '\t') {
                if(n >= maxx-8-1) {
                    break;
                }

                result.append(">       ");
                n += 8;
            }
            else {
                if(n >= maxx-1) {
                    break;
                }

                result.append(c);
                n++;
            }
        }

        over_maxx := i != original_line.length();

        return (result, over_maxx);
    }

    def getLine(original_line:String):Tuple2<String,Bool> {
        result := "";
        for(i:=0; i<original_line.length(); i++) {
            c := original_line.chars(i);

            if(c == '\t') {
                result.append(">       ");
            }
            else {
                result.append(c);
            }
        }

        maxx := getmaxx();

        return (result, result.length() >= maxx-1);
    }

    def fixCursorAndScrollTop() {
        maxy := getmaxy()-1;

        if(cursorY >= maxy) {
            scroll_size := cursorY - maxy + 1;

            scrollTopY += scroll_size;
            cursorY -= scroll_size;

            if(scrollTopY >= texts.length()) {
                scrollTopY = texts.length()-1;
            }

            if(scrollTopY < 0) {
                scrollTopY = 0;
            }
        }

        if(cursorY < 0) {
            scroll_size := -cursorY;

            cursorY = 0;
            scrollTopY -= scroll_size;

            if(scrollTopY >= texts.length()) {
                scrollTopY = texts.length()-1;
            }

            if(scrollTopY < 0) {
                scrollTopY = 0;
            }
        }

        if(cursorY >= maxy) {
            cursorY = maxy -1;
        }

        if(scrollTopY + maxy >= texts.length()) {
            maxy2 := texts.length() - scrollTopY;

            if(cursorY >= maxy2) {
                cursorY = maxy2-1;
            }
        }

        if(cursorY < 0) {
            cursorY = 0;
        }

        original_line := texts.items(scrollTopY+cursorY);
        if(original_line.identifyWith(null)) {
            original_line = "";
        }

        (line, over_maxx) := getLineInsideScreenSize(original_line, false);

        maxx := getmaxx();

        if(line.equals("")) {
            scrollTopX = 0;
            cursorX = 0;
        }
        elif(cursorX >= maxx-1) {
            if(over_maxx) {
                scroll_size := cursorX - maxx + 1;

                cursorX -= scroll_size + 1;
                scrollTopX += scroll_size + 1;

                if(scrollTopX >= original_line.length()-maxx+1) {
                    scrollTopX = original_line.length()-maxx+1;
                }
            }
            else {
                cursorX = line.length()-1;
            }
        }
        elif(cursorX >= line.length() && line.length() != 0) {
            cursorX = line.length()-1;
        }
    }

    def enterNewLine(no_tails_getting:bool) {
        maxx := getmaxx();
        maxy := getmaxy();

        original_line := texts.items(scrollTopY+cursorY);
        if(original_line.identifyWith(null)) {
            original_line = "";
        }

        tails := "";
        if(!no_tails_getting) {
            tails = original_line.subString((scrollTopX+cursorX)..-1);
            original_line.delete((scrollTopX+cursorX)..-1);
        }

        spaces_num := 0;

        try {
            spaces_num = original_line.scan(/^\s+/).items(0).length();
            if(tails.length() == 0) {
                spaces_num++;
            }
            cursorX = spaces_num;
        } catch(e:Exception) {
            spaces_num = -1;
            cursorX = 0;
        }

        scrollTopX = 0;
        cursorY++;
        
        spaces := " ".multiply(spaces_num);
        spaces.append(tails);
        texts.insert(cursorY+scrollTopY, spaces);

        fixCursorAndScrollTop();

        startPositionOfInsertMode = cursorX + scrollTopX;
    }

    def enterInsertMode() {
        mode = INSERTMODE;
        startPositionOfInsertMode = cursorX + scrollTopX;
    }

    def getCursorChar(): char {
        result:char = '\0';
        maxy := getmaxy();
        visible_texts := texts.subList(scrollTopY, scrollTopY + maxy-1);

        y := 0;
        visible_texts.each {
            (line, over_maxx) := getLineInsideScreenSize(it, cursorY == y);

            ### cursor ####
            if(cursorY == y) {
                try {
                    result = line.chars(cursorX);
                }
                catch(e:Exception) {
                    result = '\0';
                }
                break;
            }

            y++;
        }

        return result;
    }

    def defaultKeyEnvents() {
        keyEvents['j'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY++;

            maxy := getmaxy()-1;

            if(cursorY >= maxy) {
                scrollTopY++;
                cursorY--;
            }

            if(scrollTopY + cursorY >= texts.length()) {
                scrollTopY--;
                cursorY--;

                if(scrollTopY < 0) {
                    scrollTopY = 0;
                }
                if(cursorY < 0) {
                    cursorY = 0;
                }
            }

            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }

            (line, over_maxx) := getLineInsideScreenSize(original_line, false);

            if(line.equals("")) {
                cursorX = 0;
            }
            else {
                if(cursorX >= line.length()) {
                    cursorX = line.length()-1;
                }
            }

            scrollTopX = 0;
        }
        keyEvents['k'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorY--;

            maxy := getmaxy()-1;

            if(cursorY < 0) {
                scrollTopY--;
                cursorY++;
            }

            if(scrollTopY < 0) {
                scrollTopY = 0;
            }

            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }
            (line, over_maxx) := getLineInsideScreenSize(original_line, false);

            if(line.equals("")) {
                cursorX = 0;
            }
            else {
                if(cursorX >= line.length()) {
                    cursorX = line.length()-1;
                }
            }

            scrollTopX = 0;
        }
        keyEvents['h'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX--;

            if(cursorX < 0) {
                scrollTopX -= -cursorX;

                if(scrollTopX < 0) {
                    scrollTopX = 0;
                }

                cursorX = 0;
            }
        }
        keyEvents['l'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            self.cursorX++;

            maxx := getmaxx();

            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }
            (line, over_maxx) := getLineInsideScreenSize(original_line, false);

            if(line.equals("")) {
                cursorX = 0;
            }
            elif(cursorX >= maxx-1) {
                if(over_maxx) {
                    cursorX--;
                    scrollTopX++;

                    if(scrollTopX >= original_line.length()-maxx+1) {
                        scrollTopX = original_line.length()-maxx+1;
                    }
                }
                else {
                    cursorX = line.length()-1;
                }
            }
            elif(cursorX >= line.length()) {
                cursorX = line.length()-1;
            }
        }
        keyEvents['w'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }

            (line,over_maxx) := getLine(original_line);

            if(original_line.identifyWith(null).negative()) {
                if(line.equals("")) {
                    cursorX = 0;
                    cursorY++;
                    scrollTopX = 0;
                }
                else {
                    c := line.chars(scrollTopX+cursorX);

                    if(c.isalpha()) {
                        while(c.isalpha()) {
                            cursorX++;

                            if(scrollTopX+cursorX >= line.length()-1) {
                                cursorX = 0;
                                cursorY++;
                                scrollTopX = 0;
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    elif(c.isdigit()) {
                        while(c.isdigit()) {
                            cursorX++;

                            if(scrollTopX+cursorX >= line.length()-1) {
                                cursorX = 0;
                                cursorY++;
                                scrollTopX = 0;
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    elif(c.isspace()) {
                        while(c.isspace()) {
                            cursorX++;

                            if(scrollTopX+cursorX >= line.length()-1) {
                                cursorX = 0;
                                cursorY++;
                                scrollTopX = 0;
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    else {
                        while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                            cursorX++;

                            if(scrollTopX+cursorX >= line.length()-1) {
                                cursorX = 0;
                                cursorY++;
                                scrollTopX = 0;
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                }

                maxx := getmaxx();

                if(line.equals("")) {
                    cursorX = 0;
                }
                elif(cursorX >= maxx-1) {
                    if(over_maxx) {
                        if(scrollTopX >= original_line.length()-maxx+1) {
                            cursorX = 0;
                            cursorY++;
                            scrollTopX = 0;
                        }
                        else {
                            scroll_size := cursorX - maxx + 1;

                            cursorX-=scroll_size + 1;
                            scrollTopX+=scroll_size + 1;

                            if(scrollTopX >= original_line.length()-maxx+1) {
                                scrollTopX = original_line.length()-maxx+1;
                            }
                        }
                    }
                    else {
                        cursorX = line.length()-1;
                    }

                    if(cursorX >= maxx-1) {
                        cursorX = 0;
                        scrollTopX = 0;
                        cursorY++;
                    }
                }
                elif(cursorX >= line.length()) {
                    cursorX = line.length()-1;
                    scrollTopX = 0;
                }

                maxy := getmaxy()-1;

                if(cursorY >= maxy) {
                    scrollTopY++;
                    cursorY--;
                }

                if(scrollTopY + cursorY >= texts.length()) {
                    scrollTopY--;
                    cursorY--;

                    if(scrollTopY < 0) {
                        scrollTopY = 0;
                    }
                    if(cursorY < 0) {
                        cursorY = 0;
                    }
                }
            }
        }
        keyEvents['b'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }

            (line,over_maxx) := getLine(original_line);

            if(original_line.identifyWith(null).negative()) {
                if(line.equals("")) {
                    cursorX = 9999;
                    cursorY--;
                }
                else {
                    c := line.chars(scrollTopX+cursorX);

                    if(c.isalpha()) {
                        while(c.isalpha()) {
                            cursorX--;

                            if(scrollTopX+cursorX < 0) {
                                if(cursorY == 0) {
                                    cursorX = 0;
                                    scrollTopX = 0;
                                }
                                else {
                                    cursorX = 9999;
                                    cursorY--;
                                    scrollTopX = 0;
                                }
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    elif(c.isdigit()) {
                        while(c.isdigit()) {
                            cursorX--;

                            if(scrollTopX+cursorX < 0) {
                                if(cursorY == 0) {
                                    cursorX = 0;
                                    scrollTopX = 0;
                                }
                                else {
                                    cursorX = 9999;
                                    cursorY--;
                                    scrollTopX = 0;
                                }
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    elif(c.isspace()) {
                        while(c.isspace()) {
                            cursorX--;

                            if(scrollTopX+cursorX < 0) {
                                if(cursorY == 0) {
                                    cursorX = 0;
                                    scrollTopX = 0;
                                }
                                else {
                                    cursorX = 9999;
                                    cursorY--;
                                    scrollTopX = 0;
                                }
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                    else {
                        while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                            cursorX--;

                            if(scrollTopX+cursorX < 0) {
                                if(cursorY == 0) {
                                    cursorX = 0;
                                    scrollTopX = 0;
                                }
                                else {
                                    cursorX = 9999;
                                    cursorY--;
                                    scrollTopX = 0;
                                }
                                break;
                            }

                            c = line.chars(scrollTopX+cursorX);
                        }
                    }
                }

                if(cursorX < 0) {
                    scrollTopX -= -cursorX;
                    cursorX = 0;
                }

                maxx := getmaxx();

                original_line = texts.items(scrollTopY+cursorY);
                if(original_line.identifyWith(null)) {
                    original_line = "";
                }
                (line, over_maxx) = getLineInsideScreenSize(original_line, false);

                if(line.equals("")) {
                    cursorX = 0;
                }
                elif(cursorX >= maxx-1) {
                    if(over_maxx) {
                        scroll_size := cursorX - maxx + 1;

                        cursorX -= scroll_size + 1;
                        scrollTopX += scroll_size + 1;

                        if(scrollTopX >= original_line.length()-maxx+1) {
                            scrollTopX = original_line.length()-maxx+1;
                        }
                    }
                    else {
                        cursorX = line.length()-1;
                    }
                }
                elif(cursorX >= line.length()) {
                    cursorX = line.length()-1;
                }

                if(cursorY < 0) {
                    scrollTopY--;
                    cursorY = 0;
                }

                if(scrollTopY < 0) {
                    scrollTopY = 0;
                }

                if(scrollTopY + cursorY >= texts.length()) {
                    scrollTopY-= scrollTopY + cursorY - texts.length();
                }
            }
        }
        keyEvents['0'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            cursorX = 0;
            scrollTopX = 0;
        }
        keyEvents['$'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            maxx := getmaxx();

            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }
            (line, over_maxx) := getLineInsideScreenSize(original_line, false);

            if(line.equals("")) {
                cursorX = 0;
            }
            elif(over_maxx) {
                cursorX = line.length()-1;
                scrollTopX = original_line.length()-maxx+1;
            }
            else {
                cursorX = line.length()-1;
            }
        }

        keyEvents[('D'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-D
            maxy := getmaxy()-1;
            self.cursorY += maxy / 2;

            scrollTopX = 0;

            fixCursorAndScrollTop();

            clear();
            view();
        }
        keyEvents[('U'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-U
            maxy := getmaxy()-1;
            self.cursorY -= maxy / 2;

            scrollTopX = 0;

            fixCursorAndScrollTop();

            clear();
            view();
        }
        keyEvents['G'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            maxy := getmaxy();
            cursorX = 0;
            scrollTopY = texts.length()-1 -maxy;
            cursorY = maxy -1;
            fixCursorAndScrollTop();
        }
        keyEvents['g'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'g'.to_int) {
                scrollTopY = 0;
                cursorY = 0;
                cursorX = 0;
                fixCursorAndScrollTop();
            }
        }
        keyEvents['%'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            c := getCursorChar();

            if(c == '(') {
                nest := 0;
                y := 0;
                texts.subList(scrollTopY+cursorY, -1).each { |line:String|
                    x := 0;
                    line.each { |c2:char|
                        if(x > scrollTopX+cursorX) {
                            if(c2 == '(') {
                                nest++;
                            }
                            elif(c2 == ')') {
                                if(nest == 0) {
                                    cursorX = x - scrollTopX;
                                    cursorY = y + scrollTopY + cursorY;
                                }
                                nest--;
                            }
                        }

                        x++;
                    }

                    y++;
                }

                fixCursorAndScrollTop();
            }
        }

        ### Insert Mode ###
        keyEvents['i'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterInsertMode();
        }

        keyEvents['a'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            maxx := getmaxx();

            cursorX++;

            if(cursorX >= maxx-1) {
                scrollTopX++;
                cursorX--;
            }

            enterInsertMode();
        }
        keyEvents['A'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            maxx := getmaxx();

            original_line := texts.items(scrollTopY+cursorY);
            if(original_line.identifyWith(null)) {
                original_line = "";
            }
            (line,over_max) := getLine(original_line);

            if(line.length() > maxx-1) {
                scrollTopX = line.length() - maxx +2;
                cursorX = maxx-2;
            }
            else {
                cursorX = line.length();
            }

            enterInsertMode();
        }
        keyEvents['o'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            enterNewLine(true);

            enterInsertMode();
        }

        ### delete text ###
        keyEvents['d'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(key2) {
                case ('e'.to_int, 'w'.to_int) {
                    line := texts.items(scrollTopY+cursorY);

                    if(line.identifyWith(null).negative()) {
                        c := line.chars(scrollTopX+cursorX);

                        if(c.isalpha()) {
                            while(c.isalpha()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        elif(c.isdigit()) {
                            while(c.isdigit()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        elif(c.isspace()) {
                            while(c.isspace()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                        else {
                            while(!c.isalpha() && !c.isdigit() && !c.isspace()) {
                                line.delete(scrollTopX+cursorX);
                                c = line.chars(scrollTopX+cursorX);
                            }
                        }
                    }
                }
                case ('d'.to_int) {
                    original_line := texts.items(cursorY + scrollTopY);

                    if(original_line.identifyWith(null).negative()) {
                        texts.deleteAt(scrollTopY+cursorY);
                    }

                    if(texts.length() == 0) {
                        texts.add("");
                        scrollTopX = 0;
                        cursorX = 0;
                    }

                    fixCursorAndScrollTop();
                }
            }
        }
        keyEvents['c'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            when(key2) {
                case ('e'.to_int, 'w'.to_int) {
                    keyEvents['d'.to_int](self, 'd'.to_int, 'w'.to_int);
                    enterInsertMode();
                }
                case ('d'.to_int) {
                }
            }
        }
        keyEvents['x'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            original_line := texts.items(cursorY + scrollTopY);

            if(original_line.identifyWith(null).negative()) {
                original_line.delete(cursorX + scrollTopX);

                fixCursorAndScrollTop();
            }
        }

        ### misc ###
        keyEvents['Z'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2 == 'Z'.to_int) {
                texts.join("\n").write(fileName);
                endOfAplication = true;
            }
        }
        keyEvents[':'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            mode = COMMANDMODE;
            statusLineInCommandMode = "";
        }
        keyEvents[('L'-'A').to_int+1] = lambda(self:ViClone, key:int, key2:int) {  # Control-L
            clear();
            view();
        }
    }

    def input(): int {
        return getch();
    }

    def insertMode(key:int) {
        when(key) {
            case (('['-'A').to_int+1) {
                mode = EDITMODE;
                fixCursorAndScrollTop();
            }

            ### Backspace ###
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                maxx := getmaxx();
                original_line := texts.items(cursorY + scrollTopY);
                if(original_line.identifyWith(null)) {
                    original_line = "";
                }
                (line,over_max) := getLine(original_line);

                if(original_line.identifyWith(null).negative()) {
                    try {
                        if(scrollTopX+cursorX > 0 && cursorX + scrollTopX > startPositionOfInsertMode) {
                            original_line.chars(cursorX + scrollTopX);

                            cursorX--;
                            original_line.delete(cursorX + scrollTopX);

                            if(cursorX < 0) {
                                scrollTopX--;
                                cursorX++;

                                if(scrollTopX < 0) {
                                    scrollTopX = 0;
                                    cursorX = 0;
                                }
                            }
                        }
                    }
                    catch(e:Exception) {
                        fixCursorAndScrollTop();
                    }
                }
            }

            case ('\n'.to_int) {
                enterNewLine(false);
            }

            case (('D'-'A').to_int+1) {
                maxx := getmaxx();
                original_line := texts.items(cursorY + scrollTopY);
                if(original_line.identifyWith(null)) {
                    original_line = "";
                }
                (line,over_max) := getLine(original_line);

                if(original_line.identifyWith(null).negative()) {
                    try {
                        if(scrollTopX+cursorX > 0) {
                            cursorX-=4;
                            original_line.delete((cursorX + scrollTopX)..(cursorX + scrollTopX+4));

                            if(cursorX < 0) {
                                scrollTopX--;
                                cursorX++;

                                if(scrollTopX < 0) {
                                    scrollTopX = 0;
                                    cursorX = 0;
                                }
                            }
                        }
                    }
                    catch(e:Exception) {
                        fixCursorAndScrollTop();
                    }
                }
                
            }

            case ('\t'.to_int) {
                maxx := getmaxx();
                line := texts.items(cursorY + scrollTopY);

                if(line.identifyWith(null).negative()) {
                    line.insert(cursorX + scrollTopX, " ".multiply(tabSize));
                    cursorX+=tabSize;

                    if(cursorX >= maxx-1) {
                        scrollTopX += tabSize;
                        cursorX-=tabSize;
                    }

                    fixCursorAndScrollTop();
                }
            }

            else {
                maxx := getmaxx();
                line := texts.items(cursorY + scrollTopY);

                if(line.identifyWith(null).negative()) {
                    c := key.to_char;
                    if(c.isalnum() || c == ' ' || c.isgraph()) {
                        line.insert(cursorX + scrollTopX, c.toString());
                        cursorX++;

                        if(cursorX >= maxx-1) {
                            scrollTopX++;
                            cursorX--;
                        }
                    }
                }
            }
        }
    }

    def commandMode(key:int) {
        when(key) {
            case ('w'.to_int) {
                statusLineInCommandMode.append("w");
            }
            case ('q'.to_int) {
                statusLineInCommandMode.append("q");
            }
            case ('!'.to_int) {
                statusLineInCommandMode.append("!");
            }
            case (('['-'A').to_int+1) {
                mode = EDITMODE;
            }
            case (('H'-'A').to_int+1, KEY_BACKSPACE) {
                statusLineInCommandMode.delete(-2);
            }
            case (KEY_ENTER, ('J'-'A').to_int+1) {
                if(statusLineInCommandMode.match(/w/) && statusLineInCommandMode.match(/q/)) {
                    texts.join("\n").write(fileName);
                    endOfAplication = true;
                }
                elif(statusLineInCommandMode.match(/q/) && statusLineInCommandMode.match(/!/)) {
                    endOfAplication = true;
                }
                elif(statusLineInCommandMode.match(/w/)) {
                    texts.join("\n").write(fileName);
                    modifiedText = false;
                }
                elif(statusLineInCommandMode.match(/q/)) {
                    if(!modifiedText) {
                        endOfAplication = true;
                    }
                }

                mode = EDITMODE;
            }
        }
    }

    def runKeyInvent(key:int) {
        when(mode) {
            case (EDITMODE) {
                if(keyEvents[key].identifyWith(null).negative()) {
                    key2 := 0;
                    when(key) {
                        case ('d'.to_int, 'c'.to_int, 'Z'.to_int, 'g'.to_int) {
                            key2 = getch();
                        }
                    }
                    keyEvents[key](self, key, key2);
                }
            }

            case (INSERTMODE) {
                modifiedText = true;
                insertMode(key);
            }

            case (COMMANDMODE) {
                commandMode(key);
            }
        }
    }

    def clearWithoutBlink() {
        maxx := getmaxx();
        maxy := getmaxy();

        line := " ".multiply(maxx);
        line2 := " ".multiply(maxx-1);

        for(i:=0; i<maxy; i++) {
            if(i == maxy -1) {
                line2.mvprintw(i, 0, "%s");
            }
            else {
                line.mvprintw(i, 0, "%s");
            }
        }
    }

    def view() {
        clearWithoutBlink();

        maxx := getmaxx();
        maxy := getmaxy();

        visible_texts := texts.subList(scrollTopY, scrollTopY + maxy-1);

        y := 0;
        visible_texts.each {
            (line, over_maxx) := getLineInsideScreenSize(it, cursorY == y);

            ### cursor ####
            if(cursorY == y) {
                if(line.length() == 0) {
                    attron(A_REVERSE);
                    " ".mvprintw(y,0, "%s");
                    attroff(A_REVERSE);
                }
                else {
                    line.subString(0, cursorX).mvprintw(y, 0, "%s");

                    c := line.chars(cursorX);

                    attron(A_REVERSE);
                    c.toString().mvprintw(y, cursorX, "%s");
                    attroff(A_REVERSE);

                    line.subString(cursorX+1, -1).mvprintw(y, cursorX+1, "%s");

                    if(c == '(') {
                        nest := 0;
                        y2 := 0;
                        find_cursor := false;

                        visible_texts.each {
                            (line, over_maxx) := getLineInsideScreenSize(it, false);

                            x2 := 0;
                            it.each {
                                c := it;

                                if(y2 == cursorY && x2 == cursorX) {
                                    find_cursor = true;
                                }
                                elif(find_cursor) {
                                    if(c == '(') {
                                        nest++;
                                    }
                                    elif(c == ')') {
                                        if(nest == 0) {
                                            attron(A_BOLD);
                                            c.toString().mvprintw(y2, x2, "%s");
                                            attroff(A_BOLD);
                                            return;
                                        }

                                        nest--;
                                    }
                                }

                                x2++;
                            }

                            y2++;
                        }
                    }
                    elif(c == '{') {
                    }
                }
            }
            ### visible line ###
            else {
                if(line.length() != 0) {
                    line.mvprintw(y, 0, "%s");
                }
            }

            y++;
        }

        if(mode == COMMANDMODE) {
            attron(A_REVERSE);
            statusLineInCommandMode.mvprintw(maxy-1, 0, ":%s");
            attroff(A_REVERSE);
        }
        elif(mode == INSERTMODE) {
            if(texts.length() == 0) {
                attron(A_REVERSE);
                mvprintw(maxy-1, 0, "INSERT %s %d %d", array { fileName, scrollTopY+cursorY, scrollTopX+cursorX });
                attroff(A_REVERSE);
            }
            else {
                attron(A_REVERSE);
                mvprintw(maxy-1, 0, "INSERT %s %d(%d%%) %d", array { fileName, scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX });
                attroff(A_REVERSE);
            }
        }
        else {
            if(texts.length() == 0) {
                attron(A_REVERSE);
                mvprintw(maxy-1, 0, "%s %d %d", array { fileName, scrollTopY+cursorY, scrollTopX+cursorX });
                attroff(A_REVERSE);
            }
            else {
                attron(A_REVERSE);
                mvprintw(maxy-1, 0, "%s %d(%d%%) %d", array { fileName, scrollTopY+cursorY, scrollTopY+cursorY/texts.length(), scrollTopX+cursorX });
                attroff(A_REVERSE);
            }
        }

        refresh();
    }
}
