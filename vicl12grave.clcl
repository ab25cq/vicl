include "vicl11VisualMode.clcl"

class ViClone
{
    graveCursorPosition:int[];
    numGraveCursorPosition: int;
    savedCursorPosition: int;
     
    def initialize() {
        inherit();
        
        numGraveCursorPosition = 'z'-'a'+1;
        graveCursorPosition = int[numGraveCursorPosition]();
        for(i:=0; i<numGraveCursorPosition; i++) {
            graveCursorPosition[i] = -1;
        }
        savedCursorPosition = -1;
    }

    def defaultKeyEvents() {
        inherit();

        ### Insert Mode ###
        keyEvents['`'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2.to_char >= 'a' && key2.to_char <= 'z') {
                n := (key2 - 'a').to_int;
                if(graveCursorPosition[n] != -1) {
                    savedCursorPosition = getRealPosY();
                    moveCursor(graveCursorPosition[n], 0);
                }
            }
            elif(key2.to_char == '`') {
                if(savedCursorPosition != -1) {
                    saved_cursor_position := getRealPosY();
                    moveCursor(savedCursorPosition, 0);
                    savedCursorPosition = saved_cursor_position;
                }
            }
        }
        keyEvents['m'.to_int] = lambda(self:ViClone, key:int, key2:int) {
            if(key2.to_char >= 'a' && key2.to_char <= 'z') {
                n := (key2 - 'a').to_int;
                graveCursorPosition[n] = getRealPosY();
            }
        }
    }


    def runKeyEvents(key:int, key2:int) {
        inherit(key, key2);
    }
}
